<h1>About</h1>
<p>網際內容管理課程要求每一位學員利用 <a href="https://github.com/wcm2022/wcm2022">wcm2022 template</a> 與 <a href="https://pages.github.com/">Github Pages</a> 建立名稱為 wcm2022 的倉儲以及網頁. 因此需要在近端執行 Python 程式, 且需要 flask flask_cors bs4 lxml pelican markdown leo pyopenssl 等 Python 模組.</p>
<h4 style="padding-left: 30px;">問題:</h4>
<p style="padding-left: 60px;">何謂 <a href="https://docs.python.org/3/tutorial/modules.html">Python 模組</a>?</p>
<h4>下載可攜程式檔案:</h4>
<p style="padding-left: 30px;">在系上網段, 可以直接連線到 <a href="http://wcm.cycu.org:88/">http://wcm.cycu.org:88/</a> 下載 <a href="http://wcm.cycu.org:88/portable_python_wcm2022.7z">portable_python_wcm2022.7z</a> (file size: 513 MB, extracted size: 2.3 G, 這是專門為 <a href="https://mde.tw/wcm2022">wcm2022</a> 課程打造的可攜程式套件, 適合選修學員下載後在任何 Windows 10 中以隨身碟啟動後操作)</p>
<p style="padding-left: 30px;">在電腦輔助設計室中使用 USB 中的隨身程式系統, 則可以下載 <a href="http://wcm.cycu.org:88/drive.7z">drive.7z</a> (file size: 2.6 MB, extracted size: 10 MB, 只包含 PUTTY (目前使用 0.76 版), tcc, wscite 與 tmp 目錄, 採用 Hybrid 方式設定, 可與目前電腦輔助設計室中 SSD 硬碟所安裝的 Python 3.9.5 與 <a href="https://git-scm.com/download/win">Portablegit</a> 結合, 使用者只需自行設定啟動後的 home_ipv6 目錄與 home_ipv6/Desktop 目錄後即可以最輕薄便捷的方式將 SSH key 存入隨身碟, 並將個人與分組倉儲存入隨身碟啟動後的 tmp 目錄進行操作).</p>
<p style="padding-left: 30px;">使用 Hybrid 方式啟動可攜程式系統時, Python/Scripts/ 目錄中的 pip.exe、leo.exe 與 pelican.exe, 必須利用 <a href="https://mh-nexus.de/en/hxd/">HxD</a> 修改 Python.exe 檔案位置的絕對路徑 (是否能夠修改為啟動系統的相對路徑, 也就是直接改為 Python.exe?).</p>
<p style="padding-left: 30px;">假如是在其他網段, 則可下載 <a href="https://drive.google.com/file/d/1TMPsHz6G01-pxkvXf9NFM8nFdtCHQv8D/view?usp=sharing">portable_python_wcm2022.7z</a> (下載 513 MB, 解開壓縮後 2.3GB, under wcm2022 At mde) - 包含 Python 3.9.5, Portablegit, Scite, ShareX, Wink, GitEtensions 等工具.</p>
<p style="padding-left: 30px;">請利用 <a href="https://www.7-zip.org">https://www.7-zip.org</a> 將 portable_python_wcm2022.7z 解開壓縮至 USB 3.0 以上規格的隨身碟.</p>
<h4 style="padding-left: 30px;">問題:</h4>
<p style="padding-left: 60px;">可攜式 Python 程式是如何製作的?</p>
<p style="padding-left: 60px;">可攜 Python 程式有哪些功能?</p>
<p style="padding-left: 60px;">何謂近端?</p>
<p style="padding-left: 60px;">使用 USB 隨身碟中的可攜程式系統後, 如何在 Github 建立個人的倉儲與網頁?</p>
<p style="padding-left: 90px;">何謂動態網頁與靜態網頁?</p>
<p style="padding-left: 60px;">在近端編輯完成 Github 倉儲資料後, 如何使用 token 或 SSH 方式將倉儲改版資料推送到遠端?</p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/cmsimde">cmsimde</a> 網際內容管理系統有哪些功能?</p>
<p style="padding-left: 60px;"><a href="https://www.bosch.com/stories/bringing-open-source-to-mechanical-engineering/">https://www.bosch.com/stories/bringing-open-source-to-mechanical-engineering/</a></p>
<p style="padding-left: 90px;"><a href="https://github.com/boschresearch/pylife">https://github.com/boschresearch/pylife</a></p>
<p>
<script>
/**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */
    /*
    var disqus_config = function () {
    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    */
    (function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://https-mde-tw-eng.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    })();
</script>
</p>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript><h2>Local and Remote</h2>
<p>Local 指的是近端, 也就是使用者所使用的個人電腦、平板或手機, 而 Remote 則指能夠讓近端透過各種網路協定擷取資料的伺服器電腦.</p>
<p>在網際內容管理課程中除了透過 http(s) 協定, 以瀏覽器解取 Remote 端全球資訊網伺服器中的資料外, 還透過 git 以 https、sftp 或 ssh 網路協定, 用於擷取檔案, 或將改版資料推向 Github Remote 端.</p>
<p>PC to PC connection - python -m http.server, flask server, nginx server, fossil scm server, filezilla server, Ubuntu server.</p>
<p>PC Hardware + Windows 10 + <a href="https://nfu.onthehub.com/WebStore/Welcome.aspx">License</a></p>
<p>Python http.server - 簡單的 WWW server, 可用於電腦間的檔案攫取.</p>
<p>nginx WWW server - 常用的 WWW server, 可透過設定, 讓特定 IP 可以連線.</p>
<p style="padding-left: 30px;">nginx 在課程實作上, 可以用來伺服 cmsimde 的靜態網頁, 功能如同 <a href="https://pages.github.com/">Github Pages</a>.</p>
<p style="padding-left: 30px;">cmsimde 動態網頁因為需要 Python 與特定模組才能執行, 在 Windows 可以利用 Python 與 <a href="https://nssm.cc/">NSSM</a> 結合配置, 而在 Ubuntu 則可以透過 Python 與 <a href="https://uwsgi-docs.readthedocs.io/en/latest/">uWSGI</a> 配置執行, 屆時 nginx 則可與 <a href="https://letsencrypt.org/">Let's Encrypt</a> 結合, 擔任轉換 https 協定的任務.</p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Pretty_Good_Privacy">pgp</a> 與 <a href="https://www.gpg4win.org/">https://www.gpg4win.org/</a></p>
<p style="padding-left: 60px;"><a href="https://www.gnupg.org/gph/en/manual.pdf">https://www.gnupg.org/gph/en/manual.pdf</a></p>
<p style="padding-left: 30px;">請問如何設定 nginx, 讓其中所伺服的檔案只允許系上電腦下載.</p>
<p style="padding-left: 30px;">請問如何利用 gpg4win 查驗所下載的 nginx 檔案與官方網站所附的數位簽章吻合.</p>
<p>Fossil SCM server</p>
<p>Local Area Network</p>
<p>Wide Are Network</p>
<p>Remote Desktop</p>
<p>只允許系上 IPv6 網段擷取伺服器 port 88 的 nginx 設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">       server {
        listen       [::]:88 ipv6only=off;
        listen       88;
        
        #allow 140.130.XX.0/24;
        allow 2001:288:6004:XX::0/32;
        deny all;
        
        location / {
            root C:/pj2022/nginx-1.20.2/spring2022;
        }
        
        autoindex on;
    }</pre>
<p><!--配合 Wink 檔案將 js 檔案設定如下--></p>
<p>
<script>
var winkVideoData = { dataVersion: 1, frameRate: 10, buttonFrameLength: 5, buttonFrameOffset: 2, frameStops: { }, };
</script>
</p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/w7_review/w7_review.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div>
<p>以下說明 nginx 安裝流程:</p>
<script>
var winkVideoData2 = { dataVersion: 1, frameRate: 10, buttonFrameLength: 5, buttonFrameOffset: 2, frameStops: { }, };
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData2" height="630" muted="true" width="1008">
<source src="/downloads/w7_nginx/w7_nginx.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div><h2>cmsimde</h2>
<p><a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a></p>
<p>動態網頁 - localhost 與 remote site, 若在 init.py 中將 ip 設為 127.0.0.1 則在 localhost 啟動, 若設為外部 IP 則可以從 internet 中任何一台電腦的瀏覽器連接.</p>
<p>靜態網頁 - 在動態網頁系統登入後, 可以利用 generate_pages 按鈕將動態網頁轉進 content 目錄, 並結合 cmsimde/static, downloads、images、blog、reveal 等目錄, 可在全球資訊網伺服器 (如 Github Pages、nginx 或 Fossil SCM server 中以純 html、javascript 及 css 檔案進行伺服.</p>
<p>Leo Editor - cmsimde 中的 Pelican blog 與 Reveal.js 專案檔位於 config/pelican.leo 與 reveal.leo, 可以利用 Leo Editor 編輯.</p>
<p>reveal.js - 位於 config/reveal.leo</p>
<p>Pelican blog - 位於 config/pelican.leo, 可以透過 Python 程式讓 Pelican blog 內容與 blogger 同步, 其中需要執行 Google API (Oauth2) 延伸程式.</p>
<p style="padding-left: 30px;"><a href="https://www.blogger.com">https://www.blogger.com</a></p>
<h2>Token and SSH</h2>
<p>Remote Desktop - Windows, Ubuntu, Mac</p>
<h4>Token:</h4>
<p style="padding-left: 30px;"><a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token</a></p>
<p style="padding-left: 30px;">Github token 是一串可以用來替代 Github 帳號與密碼功能的字串, 可在登入 Github 帳號後, 至 <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a> 設定. 每一個 token 都具備有效時間與權限範圍, 一般初學者可以只勾選 Token 的 repo 改版權限, 並選擇 30 天的有效時間. 之後再設法改用 SSH 對 Github 倉儲改版.</p>
<p>以下影片說明如何使用 Personal Access Token 執行 git push:</p>
<p>
<script>
var winkVideoData1 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
</p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData1" height="630" muted="true" width="1008">
<source src="/downloads/token_wink/github_token.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div>
<h4>SSH:</h4>
<p style="padding-left: 30px;"><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh">https://docs.github.com/en/authentication/connecting-to-github-with-ssh</a></p>
<p style="padding-left: 30px;">Windows 10 環境中的 SSH 可以透過 <a href="https://www.putty.org/">https://www.putty.org/</a> 執行設定.</p>
<p style="padding-left: 30px;">puttygen.exe 可用來建立 OpenSSL 格式的數位簽章, public key 送到使用者 Github 帳號下 settings 中的 SSH and GPG keys 區, 在隨身碟中則存放與 public key 成對的 Putty 格式 private key.</p>
<p style="padding-left: 30px;">使用者在 Windows 10 使用 git + putty 時, 必須在啟動隨身系統時設定 GIT_SSH 變數 (<a href="https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables">Git 環境變數</a>) 至 putty 中的 plink.exe, 之後再利用 putty 設定連至 github.com 用的 session, 且在純 IPv6 環境中, 連至 github.com 的 session 除了必須指向隨身碟中的 private key 外, 還需要設定能同時支援 IPv6 與 IPv4 的 proxy server.</p>
<p style="padding-left: 30px;">使用者希望透過 SSH 對 github 中的倉儲改版時, 必須使用 <a href="mailto:git@session_name:github_account/repository.git">git@session_name:github_account/repository.git</a> 連線.</p>
<p style="padding-left: 30px;">有關 GIT_SSH 變數：</p>
<p style="padding-left: 60px;">GIT_SSH, if specified, is a program that is invoked instead of ssh when Git tries to connect to an SSH host. It is invoked like $GIT_SSH [username@]host [-p &lt;port&gt;] &lt;command&gt;. Note that this isn’t the easiest way to customize how ssh is invoked; it won’t support extra command-line parameters, so you’d have to write a wrapper script and set GIT_SSH to point to it. It’s probably easier just to use the ~/.ssh/config file for that.</p>
<p>以下影片說明如何在 Windows IPv6 環境下, 利用 PUTTY 以 SSH 協定執行 git push:</p>
<p>
<script>
var winkVideoData2 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
</p>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData2" height="630" muted="true" width="1008">
<source src="/downloads/ssh_wink/wink_ssh.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div>
<h3>YubiKey</h3>
<p><a href="https://www.yubico.com/">YubiKey</a> 可用於 <a href="https://www.nytimes.com/wirecutter/reviews/best-security-keys/">Multi-factor Authentication</a>, 也可用於 Github SSH 連線.</p>
<p style="padding-left: 30px;">Based on <a href="https://support.yubico.com/hc/en-us/articles/4403770046354-How-to-select-the-correct-YubiKey">https://support.yubico.com/hc/en-us/articles/4403770046354-How-to-select-the-correct-YubiKey</a></p>
<p style="padding-left: 60px;">The YubiKey is an extra layer of security to your online accounts. When logging into an account with a YubiKey registered, the user must have the account login credentials (username+password), and the YubiKey registered to the account. This physical layer of protection prevents many account takeovers that can be done virtually. <br/><br/>Yubico offers plenty of different form-factors for the YubiKey as well as different options for the connectors. To choose your YubiKey, ask yourself the following questions:</p>
<p style="padding-left: 30px;"><a href="https://github.com/drduh/YubiKey-Guide">https://github.com/drduh/YubiKey-Guide</a></p>
<p style="padding-left: 60px;">This is a guide to using <a href="https://www.yubico.com/products/yubikey-hardware/" rel="nofollow">YubiKey</a> as a <a href="https://security.stackexchange.com/questions/38924/how-does-storing-gpg-ssh-private-keys-on-smart-cards-compare-to-plain-usb-drives" rel="nofollow">SmartCard</a> for storing GPG encryption, signing and authentication keys, which can also be used for SSH.</p>
<p style="padding-left: 60px;">Keys stored on YubiKey are non-exportable (as opposed to file-based keys that are stored on disk) and are convenient for everyday use. Instead of having to remember and enter passphrases to unlock SSH/GPG keys, YubiKey needs only a physical touch after being unlocked with a PIN. All signing and encryption operations happen on the card, rather than in OS memory.</p>
<p style="padding-left: 30px;"><a href="https://www.amazon.com/Yubico-YubiKey-USB-Authentication-Security/dp/B07HBDX2CM">USB-A YubiKey 5 Nano</a></p>
<p style="padding-left: 30px;"><a href="https://www.amazon.com/dp/B07HBTBJ5SM">USB-C YubiKey 5 C Nano</a></p><h2>Mac and RDT</h2>
<p>在 Mac Air 使用 <a href="https://en.wikipedia.org/wiki/Remote_desktop_software">Remote DeskTop</a> (RDT) 連接到遠端的 Windows 10 電腦, 啟動 Wink 後, 可以在 Preferences 中, 利用 <span style="background-color: #ffff99;">Mac Air 鍵盤中的 fn + F1 鍵取代 Pause</span>, 就可以在 Wink 專案中以 fn + F1 取得當下的電腦操作畫面.</p>
<p>在台灣的機械工程專業使用者, 若要使用 Mac 電腦, 經常會碰到許多瓶頸, 主要原因是一般大學或研究所以上的課程, 似乎都以 Windows 操作系統為主, 因此造成機械工程師無法在 Mac 電腦上進行產品開發設計的錯誤印象.</p>
<p>從<a href="https://mde.tw/cp2021/content/%E5%AD%B8%E7%BF%92%E7%A8%8B%E5%BC%8F.html">學習程式</a>這個頁面, 可以得知目前流程的操作系統主要分為 Unix 與 Windows 兩大支, MacOS 源自 Unix 中的 <a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution">BSD</a>, 而 Windows 操作系統在 2004 版本 (2020.04 釋出) 之後, 已經能夠<a href="https://docs.microsoft.com/zh-tw/windows/wsl/install">安裝</a> <a href="https://docs.microsoft.com/en-us/windows/wsl/about">WSL</a> (Windows Subsystem for Linux), 以獨特的 Microsoft 架構使用許多 Linux 操作系統具備的指令與套件.</p>
<p>Windows 納入 WSL 之後, 讓原先在 Windows, Unix-based (包含 Linux) 與 MacOS 等不同操作系統的差異越來越小, 再加上部分機械工程相關的套件已經全雲端化 (例如: <a href="https://www.onshape.com/en/">Onshape</a>), 機械工程師只要選擇合用的套件與工具, 無論使用何種電腦或手機, 身處哪一種操作系統, 都能夠完成相同的產品開發或維護任務.</p>
<h2>Wink</h2>
<p>這裡所指的 Wink 為 3.0 版, 來自 <a href="https://www.debugmode.com/wink/">https://www.debugmode.com/wink/</a> 是一套免費 (Freeware) 的電腦操作流程影片錄製軟體, 與 <a href="https://github.com/ShareX/ShareX">ShareX</a> 相同的是, 兩套軟體的影片製作核心都是採用 <a href="https://www.ffmpeg.org/download.html">ffmpeg.exe</a>. 不同的地方在於: <a href="https://www.debugmode.com/wink/">Wink 3.0</a> 沒有開源, 可能是採用 C++ 編寫 (因為除了 Windows 版本, 還有 Linux, 但卻沒有 Mac), 且 <a href="https://www.debugmode.com/wink/">Wink 3.0</a> 可以在主影格 (Key frame) 中加入文字說明, 以及 html 按鈕. 比較適合用來製作需要較多文字說明輔助的教學影片. 至於 <a href="https://github.com/ShareX/ShareX">ShareX</a> 是一套採用 C# 編寫的開源套件, 適合製作加上搭配語音或說明字幕的操作教學影片.</p>
<p>由作者提供的 <a href="https://www.debugmode.com/wink/">Wink 3.0</a> 使用教學影片可以參考 <a href="https://mde.tw/cmstemplate/content/Wink.html">https://mde.tw/cmstemplate/content/Wink.html</a></p>
<p>將 Wink 影片嵌入 cmsimde 網頁的超文件:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script&gt;// &lt;![CDATA[
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
// ]]&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 接下來將 mp4 檔案從 downloads 目錄取出 --&gt;
&lt;div class="winkVideoContainerClass"&gt;&lt;video width="1008" height="630" autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" muted="true"&gt;
&lt;source src="/downloads/cmsimde_wink/wink2cmsimde.mp4" type="video/mp4" /&gt;&lt;/video&gt;
&lt;div class="winkVideoOverlayClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarClass"&gt;&lt;button class="winkVideoControlBarPlayButtonClass"&gt;&lt;/button&gt; &lt;button class="winkVideoControlBarPauseButtonClass"&gt;&lt;/button&gt;
&lt;div class="winkVideoControlBarProgressLeftClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressEmptyMiddleClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressRightClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressFilledMiddleClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressThumbClass"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="winkVideoPlayOverlayClass"&gt;&lt;/div&gt;
&lt;/div&gt;</pre>
<p>以下影片說明如何將 <a href="https://www.debugmode.com/wink/">Wink 3.0</a> 製作的 mp4 教學影片嵌入 cmsimde 動態與靜態網頁, 而且能在手機上觀看:</p>
<p>
<script>
var winkVideoData = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
</p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/cmsimde_wink/wink2cmsimde.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div>
<p>也可以直接取 Wink 影片相關的 css, js 與 mp4 URL 位址, 放入 Blogger 文章中, 例如: <a href="https://wcm2023.blogspot.com/2022/04/w9jblogger-wink.html">https://wcm2023.blogspot.com/2022/04/w9jblogger-wink.html</a> </p><h2>Nginx</h2>
<p><a href="https://nginx.org/">https://nginx.org/</a> 可以在 Windows 與 Ubuntu 中安裝.</p>
<p>Nginx 設定為 WWW 網際下載主機:</p>
<p>nginx.conf</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">server {
    # 原先可以接受 IPv4 網路連線, 目前覆蓋為 comment
    #listen       80;
    # 設定接受 IPv6 網路連線
    listen [::]:80;
    # 原先採 localhost 伺服器連線, 目前覆蓋為註解
    #server_name  localhost;
    # 只允許系上 IPv6 網路連線
    allow 2001:288:6004:17::0/32;
    # 除系上網段外, 其餘網段均拒絕連線
    deny all;
    
    location / {
        # 網際根目錄
        root E:/downloads;
        # 利用帳號密碼認證後才可連線
        auth_basic "For Authorized Users Only!";
        auth_basic_user_file C:/pj2022/nginx-1.20.2/.htpasswd; 
    }
    # 設定為列出各檔案與目錄的索引內容
    autoindex on;
}</pre>
<p>.htpasswd 利用 <a href="https://www.apachelounge.com/download/">Apache</a> 中的 htpasswd.exe 建立.</p>
<p>htpasswd -c c:/location_of_password_file/.htpasswd username</p>
<p>上述指令在命令列視窗中執行後, 需要輸入兩次與 username 對應的驗證密碼.</p>
<p></p>
<script>
var winkVideoData_nginx_htpasswd = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_nginx_htpasswd" height="630" muted="true" width="1008">
<source src="/downloads/w10_nginx_htpasswd/w10_nginx_htpasswd.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div>
<p><a href="https://mde.tw/wcm2022_guide/content/run.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/5349cefd20047e10242ca228401ad0ee0999a9a1/1a_w10_vb.py">1a w10 nginx 主機查驗</a></p><h1>Topics</h1>
<h4>IPv6 網路設定:</h4>
<p>w1 說明如何在電腦輔助設計室中設定 IPv6 網路連線, 主要步驟是關閉操作系統自動偵測 Proxy, 改為手動設定後, 取消 IPv4 網路協定. 而這三個動作可以透過開機後, 在防毒軟體正式啟動前, 利用 <a href="https://github.com/mdecourse/wcm2022/files/7819340/cadlab_network_setup.zip">cadlab_network_setup.zip</a> 中的批次檔案採管理員身分執行後, 即可以程式方式完成設定.</p>
<p>相關教學影片如下:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/DDIQTTk6HZs" title="YouTube video player" width="560"></iframe></p>
<h4>建立個人 Github 帳號下的 wcm2022 倉儲與網頁:</h4>
<p>完成電腦輔助設計室 IPv6 網路設定後, 網際內容管理課程要求每位學員都必須建立 Github 帳號, 並自行利用 submodule 方式建立 cmsimde 動態與靜態網頁, 相關教學影片如下:</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/1RbrSOfnFd4" title="YouTube video player" width="560"></iframe></p>
<p>在建立個人的 Github Pages 過程, 使用者必須在近端電腦使用 CPython 解譯器 (<a href="https://www.python.org/ftp/python/">各版本 ftp 下載</a>) 與 <a href="https://git-scm.com/download/win">PortableGit</a> 工具. 網路內容管理課程採用自行建立的可攜式程式系統, 可以將全部的系統放在隨身碟或者採 Hybrid 設定方式, 只將個人倉儲與 SSH 等資料放入隨身碟, 其餘 CPython 與 Portablegit 可透過設定, 使用 SSD 中的資料.</p>
<h4>以下將介紹如何建立可攜式程式系統:</h4>
<p>此一設定將牽涉批次檔案, subst 指令與系統環境變數設定.</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/dqPIjhL3LhE" title="YouTube video player" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/x8DEYTOSNYQ" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://mde.tw/wcm2022_guide/content/run.html?src=https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/5879f4ce419c53cf01b9b86be6a15a30d5e52c92/1agrp_2022">w3 1a 分組結果</a></p><h2>OneDrive</h2>
<p>自 2022.07 起 @gm 帳號的儲存空間只限 3GB, 為共享更大容量 (5TB) 的儲存空間, 請各學員至 <a href="https://www.microsoft.com/zh-tw/education/products/office">https://www.microsoft.com/zh-tw/education/products/office</a>, 以 @gm 帳號申請 OneDrive 儲存權限.</p>
<h2>Webpage</h2>
<p>IPv6 setup</p>
<p>建立 github 帳號</p>
<p>建立 wcm2022 倉儲 - 利用 <a href="https://github.com/wcm2022/wcm2022">https://github.com/wcm2022/wcm2022</a> 倉儲作為樣板, 連結後點擊 Use this template, 以便建立自己的 wcm2022 倉儲.</p>
<p>利用 C:\2021_cadlab_portable 啟動系統</p>
<p>git clone --recurse-submodules https://github.com/mdecycu/wcm2022.git</p>
<p>使用 git 指令需要三個 git config 設定:</p>
<ol>
<li>git config --global user.name "使用者 github 帳號"</li>
<li>git config --global user.email "使用者登記在 github 的 email"</li>
<li>git config --global http.proxy <a href="http://[2001:288:6004:17::42]:3128">http://[2001:288:6004:17::42]:3128</a></li>
</ol>
<p>git config 設定後會在 y:\home_ipv6 存為 .gitconfig</p>
<p>git config 代表要針對 git 進行設定, 其中包含提交身分與代理主機</p>
<p>git config --global 代表設定要存入 y:\home_ipv6 目錄, 假如不使用 --global 表示只有在目前這個命令列執行階段有效, 沒有使用 --global 所下的設定內容, 不會存入 y:\home_ipv6 目錄.</p>
<p>一旦完成 git clone --recurse-submodules https://github.com/mdecycu/wcm2022.git 命令的執行, 遠端倉儲會被 clone 一份當下的內容到近端的 wcm2022 目錄.</p>
<p>接下來要進入 wcm2022 倉儲目錄啟動編輯系統, 對倉儲內容進行修改.</p>
<p>cd wcm2022 表示要 change directory 到 wcm2022</p>
<p>cd .. 表示要更換目錄回到上一個目錄</p>
<p>cd tmp 表示要更換目錄到 tmp 目錄</p>
<p>cls 表示 clear screen 清除畫面</p>
<p>dir 表示要顯示 directory 目錄的內容</p>
<p>任何網路工具都有 client 與 server 的身分差別</p>
<p>browser (瀏覽器) 是 http (hypertext transfer protocol) 超文件傳輸協定的 client</p>
<p>http 的 server 為 www 伺服器</p>
<p>git 為 github 全球資訊網的 client</p>
<p>github 可視為 git 協定的伺服器 (以 ruby 寫的 www 伺服器, 但具備解析 git 倉儲內容的伺服器)</p>
<h3>cms</h3>
<p>在 wcm2022 倉儲目錄中, 可以執行 <a href="https://raw.githubusercontent.com/wcm2022/wcm2022/main/cms.bat">cms.bat</a>, 表示要利用 python 進入 cmsimde 目錄執行 wsgi.py</p>
<p>cms.bat 的內容: <a href="https://raw.githubusercontent.com/wcm2022/wcm2022/main/cms.bat">https://raw.githubusercontent.com/wcm2022/wcm2022/main/cms.bat</a></p>
<p>url = uniform resource locator</p>
<p><a href="https://zh.wikipedia.org/wiki/统一资源定位符">https://zh.wikipedia.org/wiki/统一资源定位符</a></p>
<p><a href="/downloads/run.txt">run.txt</a></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace2.editor.setValue(open(self.url).read())
        Ace2.editor.scrollToRow(0)
        Ace2.editor.gotoLine(0)
        Ace2.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"
add1to100 = button2(add1to100_url)
doc["add1to100"].bind('click', add1to100.do)
################################# p261 start 
p261_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/980606effcd29635307d6474718cd4a7ef016747/p261.py"
p261 = button2(p261_url)
doc["p261"].bind('click', p261.do)
################################## p261 end
################################## rocflag start
rocflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/roc_flag.py"
rocflag = button2(rocflag_url)
doc["rocflag"].bind("click", rocflag.do)
################################## rocflag end
################################## procflag start
procflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/proc_flag.py"
procflag = button2(procflag_url)
doc["procflag"].bind("click", procflag.do)
################################## rocflag end
################################## drawgrid start
drawgrid_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/070f424f2e9a99617009af216762163f66628e6d/draw_grid.py"
drawgrid = button2(drawgrid_url)
doc["drawgrid"].bind("click", drawgrid.do)
################################## drawgrid end
################################## grid_rect start
grid_rect_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/f3683ed24646f63625b616e9cb8e61a9a08ae9be/draw_grid_random_rect.py"
grid_rect = button2(grid_rect_url)
doc["grid_rect"].bind("click", grid_rect.do)
################################## grid_rect end
################################## rect_walk start
rect_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/fdf9749488a59f00c2398aede8b6cbe8c0ed5d81/rect_walk.py"
rect_walk = button2(rect_walk_url)
doc["rect_walk"].bind("click", rect_walk.do)
################################## rect_walk end
################################## rect_walk start
rect_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/63645d3f5823fd22bdb02e840e46e551afee4087/rect_u_walk.py"
rect_u_walk = button2(rect_u_walk_url)
doc["rect_u_walk"].bind("click", rect_u_walk.do)
################################## rect_walk end
################################## rect_rev_u_walk start
rect_rev_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/165e7792091d4b91b9923592242bfaf28258a719/rect_rev_u_walk.py"
rect_rev_u_walk = button2(rect_rev_u_walk_url)
doc["rect_rev_u_walk"].bind("click", rect_rev_u_walk.do)
################################## rect_rev_u_walk end
################################## single green chasing red start
sgcr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/9f7c1cda3a51b061cde00d104054fb3ce19ffd1a/single_green_chasing_red.py"
sgcr = button2(sgcr_url)
doc["sgcr"].bind("click", sgcr.do)
################################## single green chasing red end
################################## chasing 5 red rect start
# execute only one time
#cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/c43844d62a0bd7eb6617d5222ba93b5de033a63f/chasing_5_red_rect.py"
# continuously execution
cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/7e0563617649a2532ed0fc903858e135cbcedcd0/chasing_5_red_rect.py"
cfrr = button2(cfrr_url)
doc["cfrr"].bind("click", cfrr.do)
################################## chasing 5 red rect end
################################## usaflag start
usaflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/144b62fa07987d5ab6f369ae3661c645405e1872/usaflag.py"
usaflag = button2(usaflag_url)
doc["usaflag"].bind("click", usaflag.do)
################################## usaflag end
################################## snake start
snake_url = "https://gist.githubusercontent.com/mdecourse/d55158478f4f8fcbfedd455f8be8c7b6/raw/f29309745a98687ed5c41cf90d28ef25a1e48dd4/snake_brython_div.py"
snake = button2(snake_url)
doc["snake"].bind("click", snake.do)
################################## snake end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecourse/2a8f213b6858a40481d17556c8a2fe86/raw/0a4a824493865dc7cf56977d03c9438d002b4268/kmlo_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## auto_guess start
auto_guess_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/auto_guess.py"
auto_guess = button2(auto_guess_url)
doc["auto_guess"].bind("click", auto_guess.do)
################################## auto_guess end
################################## ball start
ball_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ball.py"
ball = button2(ball_url)
doc["ball"].bind("click", ball.do)
################################## ball end
################################## bezier start
bezier_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/79794cbd97d0846e2c9df14d54118d5e00a97a22/bezier.py"
bezier = button2(bezier_url)
doc["bezier"].bind("click", bezier.do)
################################## bezier end
################################## big_lotto start
big_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/big_lotto.py"
big_lotto = button2(big_lotto_url)
doc["big_lotto"].bind("click", big_lotto.do)
################################## big_lotto end
################################## brython_kw start
brython_kw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/brython_kw.py"
brython_kw = button2(brython_kw_url)
doc["brython_kw"].bind("click", brython_kw.do)
################################## brython_kw end
################################## bunny start
bunny_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/bunny.py"
bunny = button2(bunny_url)
doc["bunny"].bind("click", bunny.do)
################################## bunny end
################################## cango_spur start
cango_spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur.py"
cango_spur = button2(cango_spur_url)
doc["cango_spur"].bind("click", cango_spur.do)
################################## cango_spur end
################################## cango_spur1 start
cango_spur1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur1.py"
cango_spur1 = button2(cango_spur1_url)
doc["cango_spur1"].bind("click", cango_spur1.do)
################################## cango_spur1 end
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_three_gears.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## clear start
clear_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clear.py"
clear = button2(clear_url)
doc["clear"].bind("click", clear.do)
################################## clear end
################################## clock start
clock_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clock.py"
clock = button2(clock_url)
doc["clock"].bind("click", clock.do)
################################## clock end
################################## convert_temp start
convert_temp_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/convert_temp.py"
convert_temp = button2(convert_temp_url)
doc["convert_temp"].bind("click", convert_temp.do)
################################## convert_temp end
################################## display_stl start
display_stl_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/display_stl.py"
display_stl = button2(display_stl_url)
doc["display_stl"].bind("click", display_stl.do)
################################## display_stl end
################################## draw start
draw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/draw.py"
draw = button2(draw_url)
doc["draw"].bind("click", draw.do)
################################## draw end
################################## ex1 start
ex1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex1.py"
ex1 = button2(ex1_url)
doc["ex1"].bind("click", ex1.do)
################################## ex1 end
################################## ex2 start
ex2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex2.py"
ex2 = button2(ex2_url)
doc["ex2"].bind("click", ex2.do)
################################## ex2 end
################################## ex3 start
ex3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex3.py"
ex3 = button2(ex3_url)
doc["ex3"].bind("click", ex3.do)
################################## ex3 end
################################## ex4 start
ex4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex4.py"
ex4 = button2(ex4_url)
doc["ex4"].bind("click", ex4.do)
################################## ex4 end
################################## fourbar start
fourbar_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fourbar.py"
fourbar = button2(fourbar_url)
doc["fourbar"].bind("click", fourbar.do)
################################## fourbar end
################################## guess_a_number start
guess_a_number_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/guess_a_number.py"
guess_a_number = button2(guess_a_number_url)
doc["guess_a_number"].bind("click", guess_a_number.do)
################################## guess_a_number end
################################## hw1_1 start
hw1_1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-1.py"
hw1_1 = button2(hw1_1_url)
doc["hw1_1"].bind("click", hw1_1.do)
################################## hw1_1 end
################################## hw1_2 start
hw1_2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-2.py"
hw1_2 = button2(hw1_2_url)
doc["hw1_2"].bind("click", hw1_2.do)
################################## hw1-2 end
################################## knova1 start
knova1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/konva1.py"
knova1 = button2(knova1_url)
doc["knova1"].bind("click", knova1.do)
################################## knova1 end
################################## power_lotto start
power_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/power_lotto.py"
power_lotto = button2(power_lotto_url)
doc["power_lotto"].bind("click", power_lotto.do)
################################## power_lotto end
################################## spur start
spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur.py"
spur = button2(spur_url)
doc["spur"].bind("click", spur.do)
################################## spur end
################################## spur_w_form start
spur_w_form_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur_w_form.py"
spur_w_form = button2(spur_w_form_url)
doc["spur_w_form"].bind("click", spur_w_form.do)
################################## spur_w_form end
################################## stl_binary_ascii start
stl_binary_ascii_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_binary_ascii.py"
stl_binary_ascii = button2(stl_binary_ascii_url)
doc["stl_binary_ascii"].bind("click", stl_binary_ascii.do)
################################## stl_binary_ascii end
################################## stl_writer start
stl_writer_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_writer.py"
stl_writer = button2(stl_writer_url)
doc["stl_writer"].bind("click", stl_writer.do)
################################## stl_writer end
################################## turtle1 start
turtle1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle1.py"
turtle1 = button2(turtle1_url)
doc["turtle1"].bind("click", turtle1.do)
################################## turtle1 end
################################## turtle2 start
turtle2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle2.py"
turtle2 = button2(turtle2_url)
doc["turtle2"].bind("click", turtle2.do)
################################## turtle2 end
################################## turtle3 start
turtle3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle3.py"
turtle3 = button2(turtle3_url)
doc["turtle3"].bind("click", turtle3.do)
################################## turtle3 end
################################## turtle4 start
turtle4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle4.py"
turtle4 = button2(turtle4_url)
doc["turtle4"].bind("click", turtle4.do)
################################## turtle4 end
################################## turtle5 start
turtle5_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle5.py"
turtle5 = button2(turtle5_url)
doc["turtle5"].bind("click", turtle5.do)
################################## turtle5 end
################################## turtle6 start
turtle6_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle6.py"
turtle6 = button2(turtle6_url)
doc["turtle6"].bind("click", turtle6.do)
################################## turtle6 end
################################## turtle7 start
turtle7_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle7.py"
turtle7 = button2(turtle7_url)
doc["turtle7"].bind("click", turtle7.do)
################################## turtle7 end
################################## turtle8 start
turtle8_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle8.py"
turtle8 = button2(turtle8_url)
doc["turtle8"].bind("click", turtle8.do)
################################## turtle8 end
################################## twl_link_ik start
twl_link_ik_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/twl_link_ik.py"
twl_link_ik = button2(twl_link_ik_url)
doc["twl_link_ik"].bind("click", twl_link_ik.do)
################################## twl_link_ik end
################################## webcam start
webcam_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/webcam.py"
webcam = button2(webcam_url)
doc["webcam"].bind("click", webcam.do)
################################## webcam end
################################## ycqsort start
ycqsort_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ycqsort.py"
ycqsort = button2(ycqsort_url)
doc["ycqsort"].bind("click", ycqsort.do)
################################## ycqsort end
################################## fibo start
fibo_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fibo_ex.py"
fibo = button2(fibo_url)
doc["fibo"].bind("click", fibo.do)
################################## fibo end
################################## deepmerge start
deepmerge_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e89e0f978a015bf9361270a389a5b84e6244ed5b/deepmerge.py"
deepmerge = button2(deepmerge_url)
doc["deepmerge"].bind("click", deepmerge.do)
################################## deepmerge end
################################## merge3 start
merge3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/8a7452a451e57e4de720f22fc2fc8abd6aac0bc8/merge3.py"
merge3 = button2(merge3_url)
doc["merge3"].bind("click", merge3.do)
################################## merge3 end
################################## websocket start
websocket_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/86dda666271974d6c520086700db14a2124f0ae8/websocket.py"
websocket = button2(websocket_url)
doc["websocket"].bind("click", websocket.do)
################################## websocket end
################################## keycode start
keycode_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/ba159101705aaf8ba182a442b455425a48a85610/keycode.py"
keycode = button2(keycode_url)
doc["keycode"].bind("click", keycode.do)
################################## keycode end
################################## tetris start
tetris_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/738223b424c3f5f12961070aa8a75185177420b6/pygame_to_brython_tetris.py"
tetris = button2(tetris_url)
doc["tetris"].bind("click", tetris.do)
################################## tetris end
</script>
</p>
<h2>PME</h2>
<p>Department of Precision Mechanical Engineering</p>
<h4>HW1:</h4>
<p style="padding-left: 30px;">請設法比較以下三個檔案的差異, <a href="https://files.gitter.im/61e97cbb6da03739848ec746/JQwy/w4_hw1.zip">w4_hw1.zip</a></p>
<p style="padding-left: 30px;">可以使用 <a href="http://kdiff3.sourceforge.net/">http://kdiff3.sourceforge.net/</a> 工具對三個檔案進行比較.</p>
<p style="padding-left: 30px;">若使用程式方法讀進三個檔案後, 逐行比較內容.</p>
<p><a href="/downloads/w4_diff/w4_diff_note.txt">w4_diff_note.txt</a></p>
<p>
<script>
var winkVideoData2 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
</p>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData2" height="630" muted="true" width="1008">
<source src="/downloads/w4_diff/w4_diff.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div>
<h3>Brython</h3>
<p><a href="/downloads/w4_diff/brython.txt">brython.txt</a></p>
<p><a href="https://mde.tw/wcm2022_guide/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/f37259c77c5355f99c7170dd0863785b/raw/effed0ba556426c84b952237dcd82a1277741902/w4_diff.py">讀出 w4_1.txt</a> 資料內容</p>
<p><a href="/downloads/w4_diff/w4_1.txt">w4_1.txt</a></p>
<p><a href="/downloads/w4_diff/w4_2.txt">w4_2.txt</a></p>
<p><a href="/downloads/w4_diff/w4_3.txt">w4_3.txt</a></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- for ggame -->
<p>
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<script src="/downloads/brython_modules.js"></script>
</p>
<!-- Cango 程式庫 -->
<p>
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/CangoAxes-6v01-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<!-- for Konva 程式庫 -->
<p>
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><!-- #####  editor1 開始 ##### --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<p><!-- 這裡的畫布 id 為 brython_div --></p>
<div id="brython_div"></div>
<!-- graphics-column is for ggame -->
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- #####  editor1 結束 ##### --></p>
<p><!-- 以下可以開始利用 editor1 的設定編寫對應 Brython 程式 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd(ev):
    # 注意這裡清除的畫布 id 為 brython_div
    bd = doc["brython_div"]
    bd.clear()
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw_container", storage_id="kw_py_src" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()
    # 將程式載入編輯區
    Ace.editor.setValue(prog)
    Ace.editor.scrollToRow(0)
    Ace.editor.gotoLine(0)
    # 直接執行程式
    Ace.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
# 呼叫函式執行
run()
</script>
</p>
<p><!-- 印出程式2--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    # 注意這裡清除的畫布 id 為 brython_div2
    bd2 = doc["brython_div2"]
    bd2.clear()

Ace2 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw_container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src2 變數值
    try:
        url2 = doc.query["src2"]
    except:
        url2 = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog2 = open(url2).read()
    # 將程式載入編輯區
    Ace2.editor.setValue(prog2)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    # 直接執行程式
    Ace2.run()
# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace2.run)
doc['kw_show_console2'].bind('click', Ace2.show_console)
doc['kw_clear_console2'].bind('click', Ace2.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<div id="brython_div2"></div>
<p><!--  結束列印程式 2 --></p>
<p><!-- 印出程式3--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd3(ev):
    # 注意這裡清除的畫布 id 為 brython_div3
    bd3 = doc["brython_div3"]
    bd3.clear()

Ace3 = ace.Editor(editor_id="kw_editor3", console_id="kw_console3", container_id="kw_container3", storage_id="kw_py_src3" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run3():
    # 利用 get 取下 src3 變數值
    try:
        url3 = doc.query["src3"]
    except:
        url3 = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog3 = open(url3).read()
    # 將程式載入編輯區
    Ace3.editor.setValue(prog3)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    Ace3.run()
# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run3'].bind('click', Ace3.run)
doc['kw_show_console3'].bind('click', Ace3.show_console)
doc['kw_clear_console3'].bind('click', Ace3.clear_console)
doc['clear_bd3'].bind('click', clear_bd3)
# 呼叫函式執行
run3()
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor3" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="kw_filename3" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src3', 'kw_filename3');" type="submit" value="Save"/></form>
<p><button id="kw_run3">Run</button> <button id="kw_show_console3">Output</button> <button id="kw_clear_console3">清除輸出區</button><button id="clear_bd3">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console3"></textarea></div>
<div id="brython_div3"></div>
<p><!--  結束列印程式 3 --></p>
<h2>Wifi</h2>
<p>電腦輔助設計室中的 <a href="https://www.asus.com/tw/Networking-IoT-Servers/WiFi-Routers/ASUS-WiFi-Routers/RT-AC66U-plus/">Wifi Gigabit 路由器(分享器)</a>設定(2022/03/13 <a href="https://www.tp-link.com/tw/home-networking/wifi-router/archer-ax72/">同一價位機種</a>), 原先採 WAN 接到 NAT 的 output 集線器, 必須經過兩次路由才能連外, 且無法啟動 IPv6 網路連線.</p>
<p>經將 WAN 直接連到系主幹後, 將 IPv6 以 Passthrough 設定後, 可讓手機或筆電經由 810WIFI 連線後取得雙協定支援網路.</p>
<p>筆電透過 810WIFI 連線後 IPv4 部分為內部網路 192.168.50.X, 而 IPv6 部分則擁有兩個由學校配發的 IPv6 網路位址, 可用來設定 <a href="https://support.microsoft.com/en-us/windows/how-to-use-remote-desktop-5fe128d5-8fb1-7a23-3b8a-41e636865e8c">Remote Desktop</a>、WWW 或 Fossil SCM 伺服器.</p>
<p>以下說明影片就是在將 Wifi router 設為 IPv6/IPv4 雙網路協定後的使用流程:</p>
<p>
<script>
var winkVideoData2 = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
</p>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData2" height="630" muted="true" width="1008">
<source src="/downloads/w4_wifi/w4_wifi.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div>
<p>將畫面中的 master 分支內容合併至內建 main 分支後, <a href="https://www.cloudbees.com/blog/git-delete-branch-how-to-for-both-local-and-remote">可以使用</a> git delete 刪除近端倉儲的 master 分支, 並用 git push --delete 刪除遠端倉儲分支:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Y:\mdecycu\wcm2022_guide&gt;git branch -d master
Deleted branch master (was 5c2b8db).

Y:\mdecycu\wcm2022_guide&gt;git branch
* main

Y:\mdecycu\wcm2022_guide&gt;git push --delete origin master
To mdecycu:mdecycu/wcm2022_guide.git
 - [deleted]         master</pre>
<p>git branch -d master 指令是用來刪除近端倉儲的 master 分支.</p>
<p>git branch 則可用來查驗目前工作目錄(working directory)所在分支.</p>
<p>git push --delete origin master 則是透過 git push 刪除遠端(url 名稱存為 origin)倉儲中的 master 分支.</p>
<p></p>
<p></p>
<h2>WCMS</h2>
<p>所謂的全球資訊網內容管理系統 (Web Content Management System, WCMS), 指的就是:</p>
<p style="padding-left: 30px;"><a href="https://en.wikipedia.org/wiki/Web_content_management_system">https://en.wikipedia.org/wiki/Web_content_management_system</a></p>
<p style="padding-left: 30px;">上列網頁說明: A web content management system (WCM or WCMS) is a software content management system (<a href="https://en.wikipedia.org/wiki/Content_management_system">CMS</a>) specifically for <a href="https://en.wikipedia.org/wiki/Web_content">web content</a>.</p>
<p style="padding-left: 30px;">表示採用全球資訊網協定的內容管理系統才稱為 WCMS. 有些內容管理系統 (<a href="https://en.wikipedia.org/wiki/Content_management_system">CMS</a>) 並不是在全球資訊網架構下進行存取.</p>
<p style="padding-left: 30px;">常見的 <a href="https://en.wikipedia.org/wiki/Content_management_system">CMS</a> 系統: <a href="https://en.wikipedia.org/wiki/List_of_content_management_systems">https://en.wikipedia.org/wiki/List_of_content_management_systems</a></p>
<p>Blog 不僅是一種 CMS, 且是 Weblog 的簡稱, 中文稱為網誌. 以下要介紹的是 <a href="https://en.wikipedia.org/wiki/Blogger_(service)">Blogger</a>. 除了要求每位學員要利用 @gm 帳號建立個人的 <a href="https://en.wikipedia.org/wiki/Blogger_(service)">Blogger</a> 網誌外, 還要說明如何透過 <a href="https://developers.google.com/blogger">https://developers.google.com/blogger</a>, 利用 Python 程式建立或修改 <a href="https://en.wikipedia.org/wiki/Blogger_(service)">Blogger</a> 網誌中的文章.</p>
<p>利用 <a href="https://github.com/mdecourse/cmsimde">cmsimde</a> 網際內容管理套件所建立的倉儲與網站, 除了三層表單式的網頁外, 還自帶 <a href="https://blog.getpelican.com/">Pelican 網誌</a> (例如: <a href="https://mde.tw/lab/blog/">https://mde.tw/lab/blog/</a>) 與 <a href="https://revealjs.com/">Reveal.js</a> 簡報系統 (例如: <a href="https://mde.tw/wcm2022/reveal/">https://mde.tw/wcm2022/reveal/</a>).</p>
<p>以下將分別介紹如何使用:</p>
<ol>
<li>@gm 帳號建立個人 Blogger 網誌</li>
<li><a href="https://github.com/mdecourse/cmsimde">cmsimde</a> 中的 Pelican 建立網誌</li>
<li><a href="https://github.com/mdecourse/cmsimde">cmsimde</a> 中的 Reveal.js 建立全球資訊網上的簡報系統</li>
<li>Python 程式同步 Blogger 與 Pelican 網誌上的文章</li>
</ol>
<p>其中將牽涉到 <a href="https://leoeditor.com/">Leo Editor</a> 與 <a href="https://cloud.google.com/apis">https://cloud.google.com/apis</a> 的應用.</p>
<p>建立個人 Blogger 的操作步驟如下:</p>
<ol>
<li>登入個人的 @gm 帳號</li>
<li>連結到 <a href="https://www.blogger.com">https://www.blogger.com</a>, 以上列 @gm 帳號登入</li>
<li>利用 "Create Your Blog" 按鈕建立網誌</li>
<li>參考 <a href="https://link.springer.com/book/10.1007/978-1-4302-3013-7">Beginning Google Blogger</a> 電子書以及 <a href="https://link.springer.com/content/pdf/10.1007%2F978-1-4302-2666-6_12.pdf">Blogger 章節</a>內容設定個人 Blogger 網誌</li>
</ol>
<p>Leo Editor 基本操作:</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/leoeditor">https://mde.tw/leoeditor</a> </p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cp2019/blog/2019-Fall-Leo-Editor.html">http://mde.tw/cp2019/blog/2019-Fall-Leo-Editor.html</a></p>
<p>利用 Python 修改 Blogger 文章:</p>
<p>Pelican 與 Blogger 網誌內容同步:</p>
<h2>Code</h2>
<p><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p>
<p style="padding-left: 30px;"><a href="https://code.visualstudio.com/learn">學習使用 Visual Studio Code 寫程式</a></p>
<p style="padding-left: 60px;">From File &gt; Preferences &gt; Settings (macOS: Code &gt; Preferences &gt; Settings), search for telemetry, and set the Telemetry: Telemetry Level setting to off. This will silence all telemetry events from VS Code going forward.</p>
<p style="padding-left: 60px;"><a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare-pack">Live Share Extension Pack</a></p>
<p style="padding-left: 90px;"><a href="https://code.visualstudio.com/learn/collaboration/live-share">學習使用 Live Share</a></p>
<p style="padding-left: 60px;"><a href="https://code.visualstudio.com/docs/editor/intellisense#_intellisense-features">IntelliSense</a></p>
<p style="padding-left: 30px;">Web-based: <a href="https://vscode.dev/">https://vscode.dev/</a></p>
<p>電子書:</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-6901-5">Visual Studio Code Distilled</a> (2021)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-7344-9">Optimizing Visual Studio Code for Python Development</a> (2021)</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-7064-6">PowerShell for Beginner</a>s (2021)</p>
<p>專案:</p>
<p style="padding-left: 30px;"><a href="https://github.com/boltex/leojs">https://github.com/boltex/leojs</a></p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-7011-0">Essential TypeScript 4</a> (2021)</p>
<p></p>
<p></p>
<p style="padding-left: 30px;"></p>
<h2>Server</h2>
<p>若我們讀一下 <a href="https://www.cambridge.org/core/journals/proceedings-of-the-design-society-design-conference/article/conception-of-a-digital-twin-in-mechanical-engineering-a-case-study-in-technical-product-development/2E2916B3DC1F42028CD2CDACAB6FA6AC">CONCEPTION OF A DIGITAL TWIN IN MECHANICAL ENGINEERING – A CASE STUDY IN TECHNICAL PRODUCT DEVELOPMENT</a> 這篇文章. 應該不難體會傳統的機械工程領域應該要置入大量的 IT 科技, 朝向能應用於整個產品生命週期的 Digital Twin 架構邁進.</p>
<p>Digital Twin is defined as "a virtual dynamic representation of a physical system, which is connected to it over the entire life cycle for bidirectional data exchange." (<a href="https://www.researchgate.net/publication/342115737_WHAT_IS_A_DIGITAL_TWIN_-_DEFINITIONS_AND_INSIGHTS_FROM_AN_INDUSTRIAL_CASE_STUDY_IN_TECHNICAL_PRODUCT_DEVELOPMENT">Trauer et al., 2020</a>)</p>
<p>The term of a Digital Twin is part of a broader context and is located at the intersection of the three<br/>research areas virtual product development, cyber-physical systems and product lifecycle<br/>management. (<a href="https://www.researchgate.net/publication/306223791_Digital_Twin_Mitigating_Unpredictable_Undesirable_Emergent_Behavior_in_Complex_Systems">Grieves and Vickers, 2017</a>).</p>
<hr/>
<p>針對能夠應用於網際內容管理課程使用的 <a href="/downloads/HPE_ProLiant_ML_10_v2_Server.pdf">HPE_ProLiant_ML_10_v2_Server.pdf</a> 伺服器, 除了解電腦硬體規格與配置外, 還需在實體操作系統與虛擬操作系統中安裝設定網際內容管理系統, 包括 cmsimde 動態與靜態網站, 以及 Fossil SCM server.</p>
<p>IT 技術:</p>
<p style="padding-left: 30px;">操作系統: <a href="https://docs.microsoft.com/zh-tw/windows/release-health/status-windows-10-21h2">Windows 10 21H2</a> + <a href="https://docs.microsoft.com/zh-tw/windows/wsl/compare-versions">WSL</a>, <a href="https://cdimage.ubuntu.com/daily-live/current/">Ubuntu 22.04</a></p>
<p style="padding-left: 30px;">MSYS2: <a href="https://www.msys2.org/">https://www.msys2.org/</a></p>
<p style="padding-left: 30px;">CMake: <a href="https://cmake.org/">https://cmake.org/</a></p>
<p style="padding-left: 30px;">Putty: <a href="https://www.putty.org/">https://www.putty.org/</a></p>
<p style="padding-left: 30px;">Git: <a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p>
<p style="padding-left: 30px;">WWW server: <a href="https://nginx.org/">nginx.org</a></p>
<p style="padding-left: 30px;">Proxy: <a href="https://www.stunnel.org/">https://www.stunnel.org/</a></p>
<p style="padding-left: 30px;">NSSM: <a href="https://nssm.cc/">https://nssm.cc/</a></p>
<p style="padding-left: 30px;">Fossil SCM: <a href="https://www2.fossil-scm.org">https://www2.fossil-scm.org</a></p>
<p style="padding-left: 30px;">Flask: <a href="https://flask.palletsprojects.com/en/2.1.x/">https://flask.palletsprojects.com/en/2.1.x/</a></p>
<p style="padding-left: 30px;">Python: <a href="https://www.python.org/">https://www.python.org/</a></p>
<p style="padding-left: 30px;">uwsgi: <a href="https://uwsgi-docs.readthedocs.io/en/latest/">https://uwsgi-docs.readthedocs.io/en/latest/</a></p>
<p style="padding-left: 30px;">Oauth2: <a href="https://oauth.net/2/">https://oauth.net/2/</a></p>
<p style="padding-left: 30px;">Google API: <a href="https://cloud.google.com/apis/docs/overview">https://cloud.google.com/apis/docs/overview</a></p>
<p style="padding-left: 30px;">fossilapp: <a href="https://github.com/mdecycu/fossilapp">https://github.com/mdecycu/fossilapp</a></p>
<p style="padding-left: 30px;">fossiloauth: <a href="https://github.com/mdecycu/fossiloauth">https://github.com/mdecycu/fossiloauth</a></p>
<p style="padding-left: 30px;">Heroku: <a href="https://www.heroku.com/">https://www.heroku.com/</a></p>
<p>CAX:</p>
<p style="padding-left: 30px;">NX: NX12、NX1980、NX2008 - NXOpen Python API </p>
<p style="padding-left: 30px;">Solvespace: <a href="https://solvespace.com">https://solvespace.com</a></p>
<p style="padding-left: 30px;">CoppeliaSim: <a href="https://coppeliarobotics.com/">https://coppeliarobotics.com/</a></p>
<p style="padding-left: 30px;">Webots: <a href="https://cyberbotics.com/">https://cyberbotics.com/</a></p>
<p style="padding-left: 30px;">Range3: <a href="https://github.com/Range-Software/range3">https://github.com/Range-Software/range3</a></p>
<p style="padding-left: 30px;">NGSolve: <a href="https://ngsolve.org/">https://ngsolve.org/</a></p>
<p><img caption="false" height="300" src="/images/ml10_v2_1.jpg" width="400"/></p>
<p><img alt="" height="300" src="/images/ml10_v2_2.jpg" width="400"/></p>
<p><img alt="" height="300" src="/images/ml10_v2_3.jpg" width="400"/></p>
<p><img alt="" height="300" src="/images/ml10_v2_4.jpg" width="400"/></p><h3>Win10</h3>
<p>變更 vdi 虛擬主機檔案的 uuid:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">C:\Users\admin\Downloads&gt;"C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" internalcommands sethduuid wcm_w7.vdi</pre>
<p>在 HP Proliant ML 10 伺服器上安裝 Virtualbox 與 Windows 10 過程影片:</p>
<p>Wink 影片嵌入 cmsimde 超文件檔案: <a href="/downloads/w7_hp_virtualbox_win/w7_hp_virtualbox_win.txt">w7_hp_virtualbox_win.txt</a></p>
<p>Wink 影片嵌入 blog 超文件檔案: <a href="/downloads/embed_wink_into_blog.txt">embed_wink_into_blog.txt</a></p>
<p> 以下影片說明如何利用電腦輔助設計室中的電腦, 安裝 Windows 10 虛擬主機:</p>
<script>
var winkVideoData = { dataVersion: 1, frameRate: 10, buttonFrameLength: 5, buttonFrameOffset: 2, frameStops: { }, };
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/w7_vbox/w7_vbox.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div>
<p>以下影片則說明如何在 HP 伺服器中安裝 Windows 10:</p>
<p><!--配合 Wink 檔案將 js 檔案設定如下--></p>
<p>
<script>
var winkVideoData2 = { dataVersion: 1, frameRate: 10, buttonFrameLength: 5, buttonFrameOffset: 2, frameStops: { }, };
</script>
</p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData2" height="630" muted="true" width="1008">
<source src="/downloads/w7_hp_virtualbox_win/w7_hp_virtualbox_win.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div><h2>IPv6 setup</h2>
<p>利用 <a href="https://www.debugmode.com/wink/">Wink</a> 建立電腦操作流程影片時, 必須注意:</p>
<ol>
<li>可以與 ShareX 共用 <a href="https://www.ffmpeg.org/download.html#build-windows">ffmpeg.exe</a>.</li>
<li>為了讓影片能在手機觀看, video 標註中必須帶有 autoplay 與 controls 屬性.</li>
<li>video 標註的大小必須與 <a href="https://www.debugmode.com/wink/">Wink</a> 專案檔中的設定相符, 合適的尺寸大小: width="1008" height="630".</li>
<li>以下 <a href="https://www.debugmode.com/wink/">Wink</a> 影片設定超文件檔案: <a href="/downloads/wink_script_and_setup.txt">wink_script_and_setup.txt</a></li>
</ol>
<p><!--配合 Wink 檔案將 js 檔案設定如下--></p>
<p>
<script>
var winkVideoData = { dataVersion: 1, frameRate: 10, buttonFrameLength: 5, buttonFrameOffset: 2, frameStops: { }, };
</script>
</p>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData" height="630" muted="true" width="1008">
<source src="/downloads/wcm_w2_2.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div>
<h2>Heroku</h2>
<p>在近端 IPv6 網段, 可以從<a href="http://wcm.cycu.org:88/github/cp2020/content/index.html?q=heroku">這裡</a>查詢與 Heroku 有關的資料.</p>
<p>Heroku 是一個雲端應用程式服務, 可以用來伺服靜態網頁, 也可以用來執行 Python + Flask 編寫的動態網頁. 在 Heroku 免費帳號下, 若希望執行 cmsimde 動態網頁, 必須將 config/content.htm 轉為 Postgresql 資料庫儲存.</p>
<p>假如近端使用 IPv6 上網, 則更新 Heroku cli 之前, 必須先設定雙網路支援的 Proxy Server:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">set HTTP_PROXY=http://kmolab:kmolab10@[2001:288:6004:xx::xx]:3128
set HTTPS_PROXY=http://kmolab:kmolab10@[2001:288:6004:xx::xx]:3128

c:\heroku\bin\heroku update</pre>
<p></p><h1>Midterm</h1>
<p><a href="https://mde.tw/wcm2022_guide/content/run.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/3582dddbb1f6deecec9fcce65f191a2415e4d7a5/j5_w8_grp.py">五專倉儲與網頁連結</a></p>
<h4>期中課程內容整理</h4>
<p style="padding-left: 30px;"><a href="https://mde.tw/wcm2022_guide/blog/wcm2022-w7-review.html">https://mde.tw/wcm2022_guide/blog/wcm2022-w7-review.html</a></p>
<h4 style="padding-left: 30px;">網路設定:</h4>
<p style="padding-left: 60px;">開機後關閉自動 Proxy 設定, 改為手動且關閉 IPv4 網路協定. 這三個動作可以透過開機後, 在防毒軟體正式啟動前, 利用 <a href="https://github.com/mdecourse/wcm2022/files/7819340/cadlab_network_setup.zip">cadlab_network_setup.zip</a> 中的批次檔案採管理員身分執行後, 即可以程式方式完成設定.</p>
<h4 style="padding-left: 30px;">建立可攜系統:</h4>
<p style="padding-left: 60px;">在電腦輔助設計室可以直接下載 <a href="http://wcm.cycu.org:88/portable_python_wcm2022.7z">portable_python_wcm2022.7z</a>, 若是採用 810WIFI 連網, 則可透過 ::4 代理主機上網 (需要連線密碼) 後下載. 若需要更完整可以編輯連結 C/C++ 程式的可攜系統 (例如: 利用 NX12, NX1980 或 NX2008 等系統的 <a href="https://docs.plm.automation.siemens.com/data_services/resources/nx/12/nx_api/custom/en_US/ugopen_doc/index.html">UG Open C</a> (<a href="https://mde.tw/cd2022_guide/downloads/nxopen/UG_Open-API_Programming.pdf">架構</a>) 編寫延伸程式時), 則可下載 <a href="http://wcm.cycu.org:88/compile_copsim_cd2022.7z">compile_copsim_cd2022.7z</a>.</p>
<h4 style="padding-left: 30px;">網頁配置與部署:</h4>
<p style="padding-left: 60px;">動態網頁與靜態網頁: <a href="https://github.com/mdecycu/cmsimde">cmsimde</a> 網際內容管理系統的動態網頁採用 <a href="https://flask.palletsprojects.com/en/2.1.x/">Flask</a> 編寫, 需要 Python 與<a href="https://mde.tw/cmstemplate/content/CMSiMDE.html">特定模組</a>才可執行 (例如: 近端可攜系統、遠端伺服器與 <a href="https://www.heroku.com/">Heroku</a>), 而靜態網頁則只包含 html、css 與 Javascript, 可以利用 <a href="https://pages.github.com/">Github Pages</a> 或 <a href="http://nginx.org/">Nginx</a> 執行伺服.</p>
<h4 style="padding-left: 30px;">網際多媒體內容建置:</h4>
<p style="padding-left: 60px;">任何 Windows 環境中的操作過程, 可以透過 Wink 拍攝操作影片, 並嵌入網頁 (包括 <a href="https://github.com/mdecycu/cmsimde">cmsimde</a>、blog 與簡報)中.</p>
<h4 style="padding-left: 30px;">Github 上的個人與分組倉儲:</h4>
<p style="padding-left: 60px;">建立個人或分組倉儲可以利用 <a href="https://github.com/wcm2022/wcm2022">https://github.com/wcm2022/wcm2022</a> 作為 template.</p>
<h4 style="padding-left: 30px;">倉儲改版協定:</h4>
<p style="padding-left: 60px;">將倉儲改版後, 可以利用<a href="https://mde.tw/wcm2022_guide/content/Token%20and%20SSH.html"> token 或 ssh 方式進行提交</a>.</p>
<h4 style="padding-left: 30px;">協同產品設計:</h4>
<p style="padding-left: 60px;">以上利用各種開源套件建立網頁的目的, 是讓機械工程相關人員可以利用電腦與網路進行協同產品設計.</p>
<p style="padding-left: 60px;">協同產品設計流程中包括編寫網頁前端與伺服器後端的程式, 與各種 CAD/CAE/CAM 系統進行互動, 終極目標是能將所設計的產品在虛實整合中, 以最佳化效能完成 <a href="https://en.wikipedia.org/wiki/Digital_twin">digital twin</a> 系統, 讓產品生命週期過程中的各方人士都能取得最大利益.</p>
<h4 style="padding-left: 30px;">其他學習主題:</h4>
<p style="padding-left: 60px;">能不能將計算機程式所開發的程式, 透過分組協同方式多人合作下, 將持續改進的程式部署在個人與分組網頁, 部署在 Pelican 與 Blogger 網誌, 部署在 Reveal.js 簡報系統上?</p>
<p style="padding-left: 60px;">會不會運用實體 Windows 10、虛擬 Windows 10、實體 Ubuntu 22.04、虛擬 Ubuntu 22.04、 Github、Gitlab、Bitbucket 以及 Heroku, 配置部署上述個人或分組協同所完成的網際內容 (網頁與前後端整合程式)?</p>
<h4 style="padding-left: 30px;">期中考週之後的主題:</h4>
<p style="padding-left: 60px;">配置 Brython 環境<br/>設定 Pelican 網誌<br/><a href="https://mde.tw/lab/blog/sync-pelican-and-blogger-content.html">Blogger 網誌同步</a><br/>計算機概論<br/>電腦硬體拆解<br/>建立 Virtualbox 虛擬主機<br/>Fossil SCM server<br/>Tetris on Brython</p><h2>四技任務</h2>
<p>請利用期中考週的課程時段 (09:10 - 11:00), 在 <a href="https://github.com/mdecycu/wcm2022_guide/blob/main/downloads/w8_ansic/w8_project.wnk">w8_project.wnk</a> 專案的頁面內容引導下, 加入各頁面的說明字串, 完成後請將 Wink 影片放入個人網頁 (頁面標題為 H1 midterm) 與個人 Pelican 網誌中 (Slug 設為 midterm).</p>
<p><a href="https://mde.tw/wcm2022_guide/content/run.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/8d10f6db758cf7a0768cad6024e46339db628724/1a_midterm.py">midterm 查驗</a></p>
<div id="brython_div" style="padding-left: 30px;"><a href="https://s40723207.github.io/wcm2022/blog/midterm.html">40723207 blog</a> <a href="https://s40723207.github.io/wcm2022/content/midterm.html">40723207 cms</a><br/><a href="https://s40723229.github.io/wcm2022/blog/midterm.html">40723229 blog</a> <a href="https://s40723229.github.io/wcm2022/content/midterm.html">40723229 cms</a><br/><a href="https://s40723245.github.io/wcm2022/blog/midterm.html">40723245 blog</a> <a href="https://s40723245.github.io/wcm2022/content/midterm.html">40723245 cms</a><br/><a href="https://40823132.github.io/wcm2022/blog/midterm.html">40823132 blog</a><br/><a href="https://41023112.github.io/wcm2022/content/midterm.html">41023112 cms</a><br/><a href="https://41023121.github.io/wcm2022/content/midterm.html">41023121 cms</a><br/><a href="https://shih1717.github.io/wcm2022/content/midterm.html">41023143 cms</a><br/><a href="https://Xiang0502.github.io/wcm2022/content/midterm.html">41023147 cms</a><br/><a href="https://zeromarurei.github.io/wcm2022/content/midterm.html">41023154 cms</a></div><h2>五專任務</h2>
<p>請自行利用 @gm Google email 帳號登記 <a href="https://www.blogger.com">Blogger</a> 網誌系統 (請以個人的 Github 帳號登錄個人網誌 domain, 例如: <a href="https://github_帳號.blogspot.com">https://github_帳號.blogspot.com</a>)</p>
<p>並在個人 Blogger 中分別以計算機概論與網際內容管理課程內容摘要與心得, 建立至少兩篇網誌文章.</p>
<p>希望透過線上程式讀取學員學號與 blogger 帳號, 然後直接在網頁上建立各學員的 blogger 連結:</p>
<p>第一步: 先設法以 Brython (Browser Python, 也就是可以直接在網頁上執行的 Python), <a href="https://mde.tw/wcm2022_guide/content/run.html">讀取</a> <a href="https://mde.tw/studlist/2022spring/5j.txt">https://mde.tw/studlist/2022spring/5j.txt</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document

brython_div = document["brython_div"]

# 根據 href 與 content 將 html 元件中的 anchor 插入頁面
def makeLink(href, content):
    brython_div &lt;= html.A(content, href=href)
    brython_div &lt;= html.BR()

# 將 5j 學號、帳號、組別與 blogger 的網址設為 studlist_url
studlist_url = "https://mde.tw/studlist/2022spring/5j.txt"
# 利用 open() 與 read() 讀出資料
data = open(studlist_url).read()
print(data)</pre>
<p>加入註解後, 程式內容為: <a href="/downloads/w10_5j/w10_5j_step1.txt">w10_5j_step1.txt</a></p>
<p></p>
<script>
var winkVideoData_brython_open_read = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_brython_open_read" height="630" muted="true" width="1008">
<source src="/downloads/w10_5j/brython_open_read.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div>
<p>靈活運用上述 Brython 程式碼, 再加上 Heroku 上的 Flask 程式, 可以直接從教務主機中擷取資料:</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/wcm2022_guide/content/run.html?src=https://gist.githubusercontent.com/mdecourse/e00a3b68d4defee1987d18cc998b377a/raw/b1ab86e88df787b0fbc2ed627c532287d9c2cefc/w10_5j_ajax.py">輸入學期與課程代號, 取出修課學員學號</a></p><h2>配置 Brython</h2>
<p>在動態網頁中配置 Brython:</p>
<p>導入 Brython 程式庫:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;</pre>
<p>啟動 Brython:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>其中的 pythonpath 可以將 Python 模組放入後, 以 import 引用.</p>
<p>完成上述 Brython 程式庫導入與啟動後, 就可以利用:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script type="text/python3"&gt;
print("Brython 程式")
&lt;/script&gt;</pre>
<p>在 Brython 程式中的 print() 將會列印至 Web Developer Tools 中的 console 頁面.</p>
<p>假如希望列印資料直接呈現在頁面, 則可以利用 Brython 中的 html 與 document 模組完成:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script src="/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;script&gt;// &lt;![CDATA[
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
// ]]&gt;&lt;/script&gt;
&lt;div id="print"&gt;&lt;/div&gt;
&lt;script type="text/python3"&gt;
from browser import html, document
print = document["print"]
print &lt;= "直接將資料列在頁面"
&lt;/script&gt;</pre>
<p></p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
<div id="print"></div>
<script type="text/python3">
from browser import html, document
print = document["print"]
print <= "直接將資料列在頁面"
</script><h2>設定 Pelican 網誌</h2>
<p><a href="https://blog.getpelican.com/">Pelican</a> 網誌系統採 Python 編寫, 可以讓使用者以 Markdown 格式編寫網誌文章後, 經由 Python 程式轉為網誌超文件內容. 由於一般的網誌系統採用日期排序外, 還提供關鍵字搜尋、分類與索引的功能, 因此 Pelican 的功能就是從每一篇文章中取出中文字索引資料後, 存為 Javascript 與 Json 格式檔案, 以供關鍵字搜尋之用. 詳細流程可以參考:</p>
<p><a href="https://www.snaums.de/informatik/tipue-search-engine.html">https://www.snaums.de/informatik/tipue-search-engine.html</a></p>
<p>從 <a href="https://docs.getpelican.com/en/latest/">https://docs.getpelican.com/en/latest/</a> Pelican 文件中可以進一步了解 Pelican Blog 的運作方式.</p>
<p>在網際內容管理課程中, 採用 Leo Editor 專案來管理 Pelican Blog 的設定檔案、Markdown 與 Cli 執行. 其目的有:</p>
<ol>
<li>可以更有效管理 Pelican Blog 相關內容</li>
<li>可以讓每一位餐與協同的人員各自維護一個 Leo Editor 專案檔, 只導入與自己有關的設定、延伸程式以及網誌文章</li>
<li>可以利用 Leo Editor 節點指令, 製作網誌文章轉檔程式, 利用 Google Blogger API, 將 <a href="https://mde.tw/lab/blog/sync-pelican-and-blogger-content.html">Pelican 網誌同步至 Blogger</a></li>
</ol>
<h3>Blogger 網誌</h3>
<p>將 w9j_midterm Wink 影片嵌入 cmsimde 頁面的超文件:</p>
<p>請注意: 同一個頁面中的每一個 Wink 影片都 必須有獨一的 winkVideoData 變數, 以下採用 winkVideoData_blogger 作為影片對應變數名稱.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;script&gt;// &lt;![CDATA[
var winkVideoData_blogger = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
// ]]&gt;&lt;/script&gt;
&lt;!-- 接下來將 mp4 檔案從 downloads 目錄取出 --&gt;
&lt;div class="winkVideoContainerClass"&gt;&lt;video width="1008" height="630" autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_blogger" muted="true"&gt;
&lt;source src="/downloads/w9j_midterm/w9j_midterm.mp4" type="video/mp4" /&gt;&lt;/video&gt;
&lt;div class="winkVideoOverlayClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarClass"&gt;&lt;button class="winkVideoControlBarPlayButtonClass"&gt;&lt;/button&gt; &lt;button class="winkVideoControlBarPauseButtonClass"&gt;&lt;/button&gt;
&lt;div class="winkVideoControlBarProgressLeftClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressEmptyMiddleClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressRightClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressFilledMiddleClass"&gt;&lt;/div&gt;
&lt;div class="winkVideoControlBarProgressThumbClass"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="winkVideoPlayOverlayClass"&gt;&lt;/div&gt;
&lt;/div&gt;</pre>
<p>以下為利用 @gm 電子郵箱建立 Blogger 網誌的流程, 其中若使用 Proxy, 則需暫時關閉, 否則 Blogger 會以同一個 IP (Proxy server IP) 同時申請多個網誌的認定禁止新建網誌.</p>
<script>
var winkVideoData_blogger = {
  dataVersion: 1,
  frameRate: 10,
  buttonFrameLength: 5,
  buttonFrameOffset: 2,
  frameStops: {
  },
};
</script>
<!-- 接下來將 mp4 檔案從 downloads 目錄取出 -->
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/static" data-varname="winkVideoData_blogger" height="630" muted="true" width="1008">
<source src="/downloads/w9j_midterm/w9j_midterm.mp4" type="video/mp4"/></video>
<div class="winkVideoOverlayClass"></div>
<div class="winkVideoControlBarClass"><button class="winkVideoControlBarPlayButtonClass"></button> <button class="winkVideoControlBarPauseButtonClass"></button>
<div class="winkVideoControlBarProgressLeftClass"></div>
<div class="winkVideoControlBarProgressEmptyMiddleClass"></div>
<div class="winkVideoControlBarProgressRightClass"></div>
<div class="winkVideoControlBarProgressFilledMiddleClass"></div>
<div class="winkVideoControlBarProgressThumbClass"></div>
</div>
<div class="winkVideoPlayOverlayClass"></div>
</div>
<p>將上述 Wink 影片放入 Blogger 後: <a href="https://wcm2023.blogspot.com/2022/04/w9jblogger-wink.html">https://wcm2023.blogspot.com/2022/04/w9jblogger-wink.html</a> </p><h2>計算機概論</h2>
<p><a href="http://ocw.aca.ntu.edu.tw/ntu-ocw/ocw/cou/101S210">電機系的計算機概論課程</a> (<a href="http://ocw.aca.ntu.edu.tw/ocw_files/101S210/101S210_CS01L01.pdf">講義</a>)</p>
<p style="padding-left: 30px;">課程概述</p>
<p style="padding-left: 30px;">這是專門設計給電機系一年級同學修習的計算機概論課程, 其目的在教授計算機科學的基礎技術及知識. 同時亦著重C/C++相關程式設計的技巧. 最終希望讓同學有足夠的能力修習進階計算機相關課程, 以及利用計算機來解決日後研究議題.</p>
<p style="padding-left: 30px;">課程內容包括:</p>
<ol>
<li>資料類: 資料儲存、資料結構、資料庫</li>
<li>系統類: 計算機結構，作業系統，網路</li>
<li>科學類: 演算法, 程式語言, 人工智慧</li>
</ol>
<p style="padding-left: 30px;">課程目標</p>
<p style="padding-left: 30px;">使同學對計算機科學中的術語、法則、理論、應用及技術有基本的了解.</p>
<p><a href="http://class-qry.acad.ncku.edu.tw/crm/course_map/course.php?dept=E1&amp;cono=E113000">機械系的計算機概論</a></p>
<p style="padding-left: 30px;">本課程內容包含三大部份: 電腦入門實務, C++程式語言, 以及Matlab 程式語言, 以作為專業機械課程之基礎工具.</p>
<p style="padding-left: 30px;">目標: 建立機械系同學基礎程式撰寫能力, 並訓練使用基本工具軟體的能力, 以為未來應用到專業機械領域課程所需.</p>
<p style="padding-left: 30px;">課程教育目標:</p>
<ol>
<li>教育學生瞭解數學、科學及工程的原理, 並以系統化的方法解決機械工程的問題</li>
<li>培育具領導力、創造力及國際觀之機械工程人才</li>
</ol>
<p><a href="http://web.csie.ndhu.edu.tw/sclo/project/ppt.html">資工系的計算機概論</a></p>
<p>有關上列提到的 Matlab:</p>
<p style="padding-left: 30px;"><a href="https://www.mathworks.com/content/dam/mathworks/fact-sheet/using-matlab-with-python-cheat-sheet.pdf">Using Matlab and Python Together</a></p>
<p style="padding-left: 30px;"><a href="https://num.math.uni-goettingen.de/~schulz/data/pythonVSmatII.pdf">Exploring Python as Matlab alternative</a></p>
<p style="padding-left: 30px;"><a href="https://mas-dse.github.io/DSE200/cheat_sheets/1_python/6_2_NumPy_for_MATLAB_users.pdf">numpy for Matlab users</a></p>
<p style="padding-left: 30px;"><a href="https://www.cs.miyazaki-u.ac.jp/~date/lectures/2013ic/tutorial_slides.pdf">Python for Matlab Users</a> (2012)</p>
<p style="padding-left: 30px;"><a href="https://www.researchgate.net/publication/328175547_MatLab_vs_Python_vs_R">MatLab vs. Python vs. R</a> (2017)</p>
<p style="padding-left: 60px;">After reviewing all three of the programs in depth, we have reached the conclusion that Python is the best language to be taught in a classroom environment.  This is because it is easy to use and will allow students access to open source coding that can be found online when performing more difficult analysis.</p>
<p style="padding-left: 30px;"><a href="https://www.enthought.com/wp-content/uploads/2022/03/Enthought-MATLAB-to-Python-White-Paper_.pdf">Migrating MATLAB to Python</a> (2022)</p>
<h3>國外的相關課程</h3>
<p><a href="https://www.me.gatech.edu/files/ug/me_2122.pdf">https://www.me.gatech.edu/files/ug/me_2122.pdf</a></p>
<p style="padding-left: 30px;">大一下: Computing for Engineers</p>
<p style="padding-left: 30px;">大二下: Computing Techniques</p>
<p>Engineering Computing: <a href="https://www3.nd.edu/~powers/ame.20214/notes.pdf">https://www3.nd.edu/~powers/ame.20214/notes.pdf</a> (2021, University of Notre Dame)</p>
<p><a href="https://www.professores.uff.br/diomarcesarlobao/wp-content/uploads/sites/85/2017/09/3Programming_Engineers_EXECELLENT.pdf">An Introduction to Computer Programming for Engineers and Scientists</a> (2006, University of California)</p>
<p><a href="http://archive.fie-conference.org/fie96/papers/133.pdf">An Introduction to Computing for Engineers: New Approaches to Content and Pedagogy</a> (1996, University of Utah)</p>
<p><a href="https://www.uc.edu/webapps/af/hr/CUSTOMGUIDE/content/content/computerbasics.pdf">Windows XP 年代的 Computer Basics</a> (Microsoft)</p>
<p></p>
<p></p><h2>電腦硬體拆解</h2>
<p><a href="/downloads/HPE ProLiant ML350p Gen8.pdf">HPE ProLiant ML350p Gen8</a> (<a href="/downloads/HPE ProLiant ML350p Gen8_user_guide.pdf">user guide</a>) (2014 ~ )</p>
<p><a href="https://mde.tw/wcm2022_guide/downloads/HPE_ProLiant_ML_10_v2_Server.pdf">HPE Proliant ML10 v2 server</a> (2015 ~ )</p>
<p><a href="https://project.mde.tw/blog/yen-dian-nao-fu-zhu-she-ji-shi-dian-nao-pei-zhi.html">Asus Skylake MD790/I7-6700</a> (服役期間: 2016-2021)</p>
<p><a href="https://ark.intel.com/content/www/tw/zh/ark/products/37212/intel-pentium-processor-e5200-2m-cache-2-50-ghz-800-mhz-fsb.html">Intel E5200 CPU computer</a> (服役期間: 2010-2016)</p>
<p><a href="https://cadlab.mde.tw/post/cadlab-ji-jie-she-ji-xi-wang-lu-pei-zhi-tu.html">機械設計系網路配置圖</a></p>
<p>command line get BIOS date:</p>
<p style="padding-left: 30px;">Windows: systeminfo</p>
<p style="padding-left: 30px;">Ubuntu:</p>
<p style="padding-left: 60px;">sudo dmidecode -s bios-release-date</p>
<p style="padding-left: 60px;">sudo dmidecode -s system-product-name</p>
<p>Run remote desktop client</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Y:\&gt;REM https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/mstsc

Y:\&gt;C:\Windows\system32\mstsc.exe /v:2001:288:6004:XX:XXXX::XX</pre>
<p></p><h2>建立 Virtualbox 虛擬主機</h2>
<p><a href="https://www.virtualbox.org/">https://www.virtualbox.org/</a></p>
<p>修改 vdi UUID:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">C:\Users\admin\Downloads&gt;"C:\Program Files\Oracle\VirtualBox\VBoxManage.exe" internalcommands sethduuid wcm_w7.vdi</pre>
<p><a href="https://mde.tw/wcm2022_guide/content/Win10.html">建立 Win10 虛擬主機</a></p>
<p>建立 Ubuntu 虛擬主機</p>
<p><a href="http://wcm.cycu.org:88/wcm_w7_vdi.7z">wcm_w7_vdi.7z</a></p>
<p><a href="http://wcm.cycu.org:88/wcm_w8.7z">wcm_w8.7z</a></p>
<h3>Ubuntu2204</h3>
<p>利用 Ubuntu 22.04 建立能夠啟動 cmsimde 動態網頁, 並能以 XeTeX 編譯 .tex 的虛擬主機.</p>
<p>先以 Ubuntu 22.04 安裝 Virtualbox 虛擬主機.</p>
<p>安裝 Ubuntu 22.04 後:</p>
<p>sudo apt update</p>
<p>sudo apt upgrade</p>
<p>sudo apt install -y texlive texlive-xetex texlive-lang-chinese gsfonts fonts-moe-standard-kai ttf-mscorefonts-installer librsvg2-bin texlive-fonts-extra</p>
<p>sudo apt install python3-pip</p>
<p>sudo pip3 install flask flask_cors bs4 lxml pelican markdown leo pyopenssl</p>
<p>之後可以 xelatex project_file.tex 三次後完成 project_file.pdf 的編譯轉檔.</p>
<p>然後再利用 cmsimde 動態網站協同編輯 project_file.tex, 並伺服 project+_file.pdf</p><h2>Fossil SCM server</h2>
<p><a href="https://mde.tw/pj5073">https://mde.tw/pj5073</a> </p><h2>Tetris on Brython</h2>
<p><a href="https://mde.tw/wcm2022_guide/content/run?src=https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/738223b424c3f5f12961070aa8a75185177420b6/pygame_to_brython_tetris.py">Tetris on Brython</a></p><h2>Digital Thread</h2>
<p>Digital Twin (數位雙生) 與 Digital Thread (數位緒)</p>
<p><a href="https://www.ptc.com/en/blogs/corporate/what-is-a-digital-thread">https://www.ptc.com/en/blogs/corporate/what-is-a-digital-thread</a></p>
<p><a href="https://www.aerospacemanufacturinganddesign.com/article/amd-080910-f-35-joint-strike-fighter-digital-thread/">The Digital Thread - Key to F-35 Joint Strike Fighter Affordability</a></p>
<p><a href="https://dspace.mit.edu/bitstream/handle/1721.1/114857/Engineering-design-digital-thread-Singh-Willcox.pdf?sequence=1&amp;isAllowed=y">Engineering Design with Digital Thread</a> (From mit.edu)</p>
<p><a href="https://www.gardnerweb.com/articles/what-are-digital-twins-and-digital-threads">What Are Digital Twins and Digital Threads?</a></p>
<p><a href="https://blog.samtec.com/post/the-digital-thread/">https://blog.samtec.com/post/the-digital-thread/</a></p>
<p><a href="https://www.3dcadworld.com/3d-cad-promotes-functioning-digital-thread/">https://www.3dcadworld.com/3d-cad-promotes-functioning-digital-thread/</a></p>
<p><a href="https://www.gray.com/insights/what-the-digital-thread-means-for-the-future-of-design-and-manufacturing/">https://www.gray.com/insights/what-the-digital-thread-means-for-the-future-of-design-and-manufacturing/</a></p>
<p><a href="https://www.capvidia.com/blog/best-step-file-to-use-ap203-vs-ap214-vs-ap242">https://www.capvidia.com/blog/best-step-file-to-use-ap203-vs-ap214-vs-ap242</a></p>
<p></p><h3>RDT</h3>
<p><a href="https://en.wikipedia.org/wiki/Remote_desktop_software">Remote DeskTop</a></p>
<p>以下批次檔案指令可以透過 Windows 遠端桌面 client 連接至遠端指定電腦:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">REM https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/mstsc
%windir%\system32\mstsc.exe /v:2001:288:6004:XX:XXXX::XX</pre>
<p></p>
<pre></pre><h1>Portable Python</h1>
<h4>何謂可攜式 Python 程式環境?</h4>
<h4 style="padding-left: 30px;">Python 程式是如何執行的?</h4>
<p style="padding-left: 30px;">首先 Python 是一種解譯式 (Interpreted) 程式語言, 與 C 或 C++ 程式語言最大的差別是, C/C++ 程式碼通常必須透過編譯 (Compile) 與連結 (Link) 的過程, 將原始碼轉為可執行的格式 (在 Windows 操作系統為 .exe 檔案), 而 Python 程式寫好後, 可以直接利用解譯器執行, 使用者不需要手動執行程式碼的編譯, 而是由解譯器在執行前即時將程式碼轉換為可執行檔案.</p>
<p style="padding-left: 30px;">在 <a href="https://www.geeksforgeeks.org/internal-working-of-python/">geeksforgeeks 網站</a>, 以下列敘述說明 Python 程式如何執行:</p>
<p style="padding-left: 30px;">Python is an object-oriented programming language like Java. Python is called an interpreted language. Python uses code modules that are interchangeable instead of a single long list of instructions that was standard for functional programming languages. The standard implementation of python is called "cpython". It is the default and widely used implementation of Python.</p>
<p style="padding-left: 30px;">Python doesn’t convert its code into machine code, something that hardware can understand. It actually converts it into something called byte code. So within python, compilation happens, but it’s just not into a machine language. It is into byte code (.pyc or .pyo) and this byte code can’t be understood by the CPU. So we need an interpreter called the python virtual machine to execute the byte codes</p>
<p style="padding-left: 30px;">針對 Python 程式的"編譯"過程, 則<a href="https://www.geeksforgeeks.org/understanding-the-execution-of-python-program/">說明如下</a>:</p>
<p style="padding-left: 30px;">The Python program is converted into byte code. Byte code is a fixed set of instructions that represent arithmetic, comparison, memory operations, etc. It can run on any operating system and hardware. The byte code instructions are created in the .pyc file. The .pyc file is not explicitly created as Python handles it internally but it can be viewed with the following command:</p>
<p style="padding-left: 60px;">Y:\tmp\python_ex&gt;python -m py_compile hello.py</p>
<p style="padding-left: 30px;">-m and py_compile represent module and module name respectively. This module is responsible to generate .pyc file. The compiler creates a directory named  __pycache__ where it stores the hello.cpython-39.pyc file (若採用 Python 3.9 版次的編譯器).</p>
<p style="padding-left: 30px;">至於針對 Python 程式的"解譯"執行過程, 則<a href="https://www.geeksforgeeks.org/understanding-the-execution-of-python-program/">說明如下</a>:</p>
<p style="padding-left: 30px;">The next step involves converting the byte code (.pyc file) into machine code. This step is necessary as the computer can understand only machine code (binary code). Python Virtual Machine (PVM) first understands the operating system and processor in the computer and then converts it into machine code. Further, these machine code instructions are executed by processor and the results are displayed.</p>
<p style="padding-left: 30px;">However, the interpreter inside the PVM translates the program line by line thereby consuming a lot of time. To overcome this, a compiler known as Just In Time (JIT) is added to PVM. JIT compiler improves the execution speed of the Python program. This compiler is not used in all Python environments like CPython which is standard Python software.</p>
<p style="padding-left: 30px;">To execute the hello.cpython-39.pyc we can use the following command:</p>
<p style="padding-left: 60px;">Y:\tmp\python_ex&gt;python __pycache__\hello.cpython-39.pyc</p>
<p style="padding-left: 30px;">至於有關 python.exe 與 pythonw.exe 的差別, 則參見<a href="https://stackoverflow.com/questions/9705982/pythonw-exe-or-python-exe">這裡的說明</a>. 至於 SciTE 設定 python.properties 中, 使用 pythonw.exe -u 表示除了採非同步 (asynchronous) 執行模式外, 同時 force the stdout and stderr streams to be unbuffered; but has no effect on stdin.</p>
<h4 style="padding-left: 30px;">Python 解譯器的類別:</h4>
<p style="padding-left: 30px;">最早的 Python 解譯器以 C 程式語言編寫, 稱為 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a>, 以 Python 編寫的 Python 解譯器稱為 <a href="https://en.wikipedia.org/wiki/PyPy">Pypy</a>, 以 .NET 技術編寫的 Python 解譯器稱為 <a href="https://en.wikipedia.org/wiki/IronPython">Ironpython</a>, 以 Java 編寫的 Python 解譯器稱為 <a href="https://en.wikipedia.org/wiki/Jython">Jython</a>, 以 Javascript 編寫的 Python 解譯器稱為 <a href="https://brython.info/">Brython</a>. 以 Rust 編寫的 Python 解譯器稱為 <a href="https://github.com/RustPython/RustPython">RustPython</a>.</p>
<h4 style="padding-left: 30px;">建立可攜 Python 程式環境的目的:</h4>
<p style="padding-left: 30px;">一般在 Windows 10 中使用 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a> 都是透過操作系統安裝, 將 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a> 解譯器登錄在操作系統的 <a href="https://en.wikipedia.org/wiki/Windows_Registry">Registry</a> 中. 只不過配置在操作系統的 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a> 解譯器若在使用過程中, 透過 <a href="https://pypi.org/project/pip/">pip</a> 安裝額外的模組後, 當電腦輔助設計室中的電腦重新開機後, 操作系統將會因為安裝防寫套件而恢復原先所安裝無額外模組的狀態.</p>
<p style="padding-left: 30px;">網際內容管理與協同產品設計實習課程為了<span style="background-color: #ffff99;">讓使用者可以隨身帶著 <a href="https://en.wikipedia.org/wiki/CPython" style="background-color: #ffff99;">CPython</a> 解譯器</span>, 因此繞過 Windows 10 操作系統的 Registry 登錄, 設法以批次檔案在虛擬的硬碟 (y:) 啟動 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a> 解譯環境.</p>
<p style="padding-left: 30px;">此外, 配置在 USB 隨身碟的可攜 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a> 程式環境, 除了可執行一般 Python 程式外, 也可自行安裝所需模組, 並用於 <a href="https://github.com/mdecourse/cmsimde">cmsimde</a> 動態與靜態網站編輯.</p>
<p style="padding-left: 30px;">可攜程式環境中除 <a href="https://en.wikipedia.org/wiki/CPython">CPython</a>, 還可配置 <a href="https://www.msys2.org/">MSYS2</a> C/C++ 編譯系統. 針對 <a href="https://www.scintilla.org/SciTE.html">SciTE</a>, <a href="https://github.com/solvespace/solvespace">Solvespace</a>, <a href="https://github.com/Range-Software/range3">Range3</a>, <a href="https://github.com/CoppeliaRobotics">CoppeliaSim</a> 等開源套件執行編譯.</p>
<h4>如何建立可攜 Python 程式環境?</h4>
<p style="padding-left: 30px;">能放入 USB 隨身碟執行的 Python 程式環境包含兩個部分:</p>
<p style="padding-left: 60px;">(1) Python 解譯器系統檔案</p>
<p style="padding-left: 60px;">(2) 可攜啟動設定批次檔 (例如: <a href="/downloads/start_ipv6.bat">start_ipv6.bat</a>)</p>
<p style="padding-left: 30px;">要在 Windows 操作系統中, 取得各版本的 Python 解譯器系統檔案, 也有兩種方法:</p>
<p style="padding-left: 60px;">(1) 從官方網站下載安裝檔 (例如: <a href="https://www.python.org/ftp/python/3.10.2/">3.10.2 版</a>的 <a href="https://www.python.org/ftp/python/3.10.2/python-3.10.2-amd64.exe">python-3.10.2-amd64.exe)</a>, 手動安裝 Python, 取下安裝內容後, 解除安裝程式.</p>
<p style="padding-left: 60px;">(2) 利用 <a href="/downloads/gen_portable_python.py">gen_portable_python.py</a>, 從 Python 官方網站下載基本的 .msi 檔案 (例如 <a href="https://www.python.org/ftp/python/3.10.2/amd64/">3.10.2 版</a>中的 core.msi, dev.msi, exe.msi, lib.msi, tcltk.msi 與 tools.msi), 然後利用 <a href="https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/msiexec">msiexec.exe</a> 配合 <a href="https://docs.microsoft.com/zh-tw/windows/win32/msi/targetdir">targetdir</a> 屬性解開各安裝檔.</p>
<p id="pp310">以下將要結合 <a href="https://www.scintilla.org/SciTE.html">SciTE</a>, <a href="https://github.com/TinyCC/tinycc">Tiny C Compiler</a> 與 <a href="https://www.python.org/ftp/python/3.10.2/">Python 3.10.2</a>, 建立一個可攜版的 CPython 與 <a href="https://en.wikipedia.org/wiki/ANSI_C">ANSI C</a> 執行環境.</p>
<ol>
<li>從 <a href="http://download.savannah.gnu.org/releases/tinycc/">http://download.savannah.gnu.org/releases/tinycc/</a> 下載 <a href="http://download.savannah.gnu.org/releases/tinycc/tcc-0.9.27-win64-bin.zip">tcc-0.9.27-win64-bin.zip</a>.</li>
<li>從 <a href="https://www.scintilla.org/SciTEDownload.html">https://www.scintilla.org/SciTEDownload.html</a> 下載 <a href="https://www.scintilla.org/wscite521.zip">wscite521.zip</a>.</li>
<li>利用 Python 3.9.5 (或先前的 Python3 舊版可攜程式) 執行 <a href="/downloads/gen_portable_python.py">gen_portable_python.py</a> 取得 Python310 解譯器系統檔案.</li>
<li>根據上述流程建立的基本 Python 與 ANSI C 可攜程式系統 <a href="http://wcm.cycu.org:88/Portable_py310_tcc.7z">Portable_py310_tcc.7z</a> (只能在系網路 下載, 此一 Python 解譯器只帶有基本模組且尚未安裝 <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwiywaDasrb2AhX7rVYBHbSJCcoQFnoECAoQAQ&amp;url=https%3A%2F%2Fbootstrap.pypa.io%2Fget-pip.py&amp;usg=AOvVaw0zKVO_zW0nkF7s0zdjWFNj">get-pip.py</a>)</li>
<li>此一 Python 解譯器以 python <a href="https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwigkdK1s7b2AhUBs1YBHYhXA8oQFnoECAcQAQ&amp;url=https%3A%2F%2Fbootstrap.pypa.io%2Fget-pip.py&amp;usg=AOvVaw0zKVO_zW0nkF7s0zdjWFNj">get-pip.py</a> 安裝 pip 後, 再以 pip install flask flask_cors bs4 lxml pelican markdown leo pyopenssl 安裝 <a href="https://mde.tw/cmstemplate/content/CMSiMDE.html">cmsimde 所需模組</a>後, 即可用於 wcm2022 動態與靜態系統的編輯.</li>
<li>此一 Python 解譯器再結合 <a href="https://git-scm.com/download/win">Portablegit</a> 與 <a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">PUTTY</a>, 就可以支援以 <a href="https://mde.tw/wcm2022_guide/content/Token%20and%20SSH.html">SSH</a> 執行 github 倉儲的 git push.</li>
</ol>
<h4>如何建立網際 Python 程式環境 (Brython)?</h4>
<p style="padding-left: 30px;">例如: <a href="https://mde.tw/wcm2022_guide/content/run.html">run</a> 頁面.</p>
<p>從 <a href="https://drive.google.com/file/d/1TMPsHz6G01-pxkvXf9NFM8nFdtCHQv8D/view?usp=sharing">portable_python_wcm2022.7z</a> 下載的可攜程式環境有哪些功能?</p>
<p><span style="background-color: #ffff99;">請注意: 以下的 .7z 檔案下載, 只允許在系上網段上下載</span>.</p>
<ol>
<li><a href="http://wcm.cycu.org:88/compile_copsim_cd2022.7z">compile_copsim_cd2022.7z</a> (file size: 5 GB, extracted size: 17.3 GB, 包含除了 NX1980 之外的所有課程相關可攜程式套件, 是專門為 <a href="https://mde.tw/cd2022">cd2022</a> 課程學員打造的套件).</li>
<li><a href="http://wcm.cycu.org:88/portable_python_wcm2022.7z">portable_python_wcm2022.7z</a> (file size: 513 MB, extracted size: 2.3 G, 這是專門為 <a href="https://mde.tw/wcm2022">wcm2022</a> 課程打造的可攜程式套件, 適合選修學員下載後在任何 Windows 10 中以隨身碟啟動後操作)</li>
<li><a href="http://wcm.cycu.org:88/drive.7z">drive.7z</a> (file size: 2.6 MB, extracted size: 10 MB, 只包含 PUTTY, tcc, wscite 與 tmp 目錄, 採用 Hybrid 方式設定, 可與目前電腦輔助設計室中 SSD 硬碟所安裝的 Python 3.9.5 與 <a href="https://git-scm.com/download/win">Portablegit</a> 結合, 使用者只需自行設定啟動後的 home_ipv6 目錄與 home_ipv6/Desktop 目錄後即可以最輕薄便捷的方式將 SSH key 存入隨身碟, 並將個人與分組倉儲存入隨身碟啟動後的 tmp 目錄進行操作).</li>
</ol>
<p>以下利用 Wink3 影片說明以 Hybrid 方式啟動的 USB 隨身碟如何建立? 以及使用上與完整 USB 隨身碟可攜程式系統的差別:</p>
<p>Hybrid 可攜程式系統是只將必要檔案配置到 USB 隨身碟, 其餘檔案則使用已經存在電腦上的內容, 主要包含 Python 3.9.5 解譯程式 (863 MB) 與 Portblegit 2.31.1 (285 MB).</p>
<p>Hybrid 可攜程式系統優點:</p>
<ol>
<li>初始 USB 隨身碟只需複製 10.5 MB 的資料 (只自帶 PUTTY (4.3 MB), tcc (1.7 MB), tmp 與 wscite (4.3 MB)).</li>
<li>使用電腦 SSD 上所安裝的 Python 與 Portablegit, 執行速度會比一般 USB 隨身碟快.</li>
</ol>
<p>Hybrid 可攜程式系統缺點:</p>
<ol>
<li>在未修改 Python Script 目錄中的 .exe 可執行檔之前, 必須透過 .py 執行, 例如: 命令列 中輸入 leo 並無法執行執行, 必須採用 import leo.core.runLeo;leo.core.runLeo.run()</li>
<li>若在裝有還原卡的電腦, 未修改 Python 系統模組路徑之前, 所安裝的額外模組無法放入 USB 隨身碟中.</li>
</ol><h1>Fossil SCM</h1>
<p>利用 Fossil SCM 與 Google API 建立的網際伺服器範例: <a href="https://pj5073.cycu.org">https://pj5073.cycu.org</a></p>
<p>如何在一台 2009 年出廠的電腦設定 Fossil SCM server?</p>
<p>Windows:</p>
<p>nssm install fossil_multi</p>
<p>nssm edit fossil_multi</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">fossil.exe server C:\pj2022\multi_repo --port 9001 --https --notfound default</pre>
<p>nssm install fossil_server</p>
<p>nssm edit fossil_server</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">fossil.exe server C:\pj2022\repo\pj2022.fossil --port 9000 --https</pre>
<p>nssm install fossilapp</p>
<p>C:\compile_copsim\data\Python395\python.exe waitress_server.py</p>
<p>waitress_server.py</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># pip install waitress
from waitress import serve

# under cmsimde import fossilapp
import fossilapp

# run cmsimde dynamic site with production waitress
serve(fossilapp.app, host='127.0.0.1', port=5001, url_scheme='https')</pre>
<p>nssm install fossiloauth</p>
<p>C:\compile_copsim\data\Python395\python.exe waitress_server.py</p>
<p>waitress_server.py</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># pip install waitress
from waitress import serve

# under cmsimde import fossilapp
import fossiloauth

# run cmsimde dynamic site with production waitress
serve(fossiloauth.app, host='127.0.0.1', port=5000, url_scheme='https')</pre>
<p>stunnel.conf</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">; for single repository server: fossil_server
[https]
accept  = wcm.cycu.org:443
connect = 9000
cert = fullchain.pem
key = privkey.pem
TIMEOUTclose = 0

; for multiple repository server: fossil_multi
[https]
accept  = wcm.cycu.org:5443
connect = 9001
cert = fullchain.pem
key = privkey.pem
TIMEOUTclose = 0

; for fossiloauth
[https]
accept = wcm.cycu.org:8443
connect = 5000
cert = fullchain.pem
key = privkey.pem
TIMEOUTclose = 0

; for fossilapp
[https]
accept = wcm.cycu.org:9443
connect = 5001
cert = fullchain.pem
key = privkey.pem
TIMEOUTclose = 0</pre>
<p>nginx.conf</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">worker_processes  1;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;

    keepalive_timeout  65;

    server {
        listen       [::]:80 default ipv6only=on;
        server_name  wcm.cycu.org;
        return       301 https://$server_name$request_uri;
    }
    
       server {
        listen       [::]:88 ipv6only=off;
        listen       88;
        
        allow 140.130.17.0/24;
        allow 2001:288:6004:17::0/32;
        deny all;
        
        location / {
            root C:/pj2022/nginx-1.20.2/spring2022;
        }
        autoindex on;
    }
}
</pre>
<p>Ubuntu:</p>
<p>stunnel.conf</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[https]
accept = :443
accept = :::443
cert = /etc/letsencrypt/live/c3.cycu.org/fullchain.pem
key = /etc/letsencrypt/live/c3.cycu.org/privkey.pem 
exec = /usr/bin/fossil
execargs = /usr/bin/fossil http /home/pj2022/repository/pj2022.fossil --https --nojail</pre>
<p>flask_oauth2.ini</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[uwsgi]
socket = :8080
uid = pj2022 
gid = pj2022 
plugins-dir = /usr/lib/uwsgi/plugins/
plugin = python3
master = true
process = 4
threads = 2
chdir = /home/pj2022/fossiloauth
wsgi-file = /home/pj2022/fossiloauth/wsgi.py</pre>
<p>nginx /etc/nginx/sites-available/default</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># for redirect to https
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    root /home/pj2022/pj2022/;
    index index.html;
}

# for fossiloauth
server {
    listen 8443 ssl default_server;
    listen [::]:8443 ssl default_server;
    
    location / {
        include uwsgi_params;
        uwsgi_pass  127.0.0.1:8080;
    }
    
    ssl_certificate /etc/letsencrypt/live/c3.cycu.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/c3.cycu.org/privkey.pem;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_prefer_server_ciphers on;
    try_files $uri $uri/ =404;
}

# for fossilapp
server {
    listen 9443 ssl default_server;
    listen [::]:9443 ssl default_server;
    
    location / {
        include uwsgi_params;
        uwsgi_pass  127.0.0.1:8081;
    }
    
    ssl_certificate /etc/letsencrypt/live/c3.cycu.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/c3.cycu.org/privkey.pem;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_prefer_server_ciphers on;
    try_files $uri $uri/ =404;
}
</pre>
<p>/etc/systemd/system/cmsimde.service</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[Unit]
Description=uWSGI to serve CMSiMDE
After=network.target
   
[Service]
User=pj2022
Group=pj2022
WorkingDirectory=/home/pj2022/uwsgi_ini
ExecStart=/usr/bin/uwsgi --emperor /home/pj2022/uwsgi_ini
   
[Install]
WantedBy=multi-user.target

</pre>
<p></p>
<p></p>
<h2>PC2Server</h2>
<p>大一與專一分別從 PC 硬體安裝 Windows 10 (利用 <a href="https://clonezilla.org/">https://clonezilla.org/</a> 硬碟開機磁區 clone) 之後再逐步設定如 <a href="https://pj5073.cycu.org">https://pj5073.cycu.org</a> 與 <a href="https://wcm.cycu.org">https://wcm.cycu.org</a> 的網際伺服器.</p>
<h1>Tetris</h1>
<p><a href="https://levelup.gitconnected.com/writing-tetris-in-python-2a16bddb5318">https://levelup.gitconnected.com/writing-tetris-in-python-2a16bddb5318</a></p>
<p><a href="https://github.com/ondras/custom-tetris">https://github.com/ondras/custom-tetris</a></p>
<p><a href="https://github.com/topics/tetris?l=python">https://github.com/topics/tetris?l=python</a></p>
<p></p>
<h2>run</h2>
<p><a href="https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China#Construction_details">ROC 國旗規格</a> <a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E5%9B%BD%E6%97%97#%E8%A7%84%E6%A0%BC">PROC 國旗規格</a> <a href="https://en.wikipedia.org/wiki/Flag_of_the_United_States#Specifications">USA 國旗規格</a></p>
<p><a href="https://gist.github.com/mdecourse/05930b1775b77293523b59b1bbb43e57">Gist Brython scripts</a></p>
<p><a href="https://mde.tw/cp2021/content/%E8%A7%A3%E9%A1%8C%E7%B7%B4%E7%BF%92.html">解題練習</a></p>
<p><a href="https://mde.tw/cp2021/content/Cango.html">Cango</a></p>
<p>
<script src="/static/brython.js">
</script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- for ggame -->
<p>
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<script src="/downloads/brython_modules.js"></script>
</p>
<!-- Cango 程式庫 -->
<p>
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/CangoAxes-6v01-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<!-- for Konva 程式庫 -->
<p>
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p><button id="add1to100">add 1 to 100</button><button id="p261">p261</button><button id="rocflag">ROC flag</button><button id="procflag">PROC flag</button><button id="usaflag">USA flag</button><button id="drawgrid">Draw Grid</button><button id="grid_rect">Random Rect</button><button id="rect_walk">Rect Walk</button><button id="rect_u_walk">Rect U Walk</button><button id="rect_rev_u_walk">Rect rev U Walk</button><button id="sgcr">單節貪食蛇</button><button id="cfrr">5 個紅點方塊</button><button id="snake">Snake</button><button id="bsnake">BSnake</button><button id="auto_guess">auto_guess</button><button id="ball">ball</button><button id="bezier">bezier</button><button id="big_lotto">big_lotto</button><button id="brython_kw">brython_kw</button><button id="bunny">bunny</button><button id="cango_spur">cango_spur</button><button id="cango_spur1">cango_spur1</button><button id="cango_three_gears">cango_three_gears</button><button id="clear">clear</button><button id="clock">clock</button><button id="convert_temp">convert_temp</button><button id="deepmerge">deepmerge</button><button id="display_stl">display_stl</button><button id="draw">draw</button><button id="ex1">ex1</button><button id="ex2">ex2</button><button id="ex3">ex3</button><button id="ex4">ex4</button><button id="fibo">fibo</button><button id="fourbar">fourbar</button><button id="guess_a_number">guess_a_number</button><button id="hw1_1">hw1_1</button><button id="hw1_2">hw1_2</button><button id="keycode">Keycode</button><button id="knova1">knova1</button><button id="merge3">merge3</button><button id="power_lotto">power_lotto</button><button id="spur">spur</button><button id="spur_w_form">spur_w_form</button><button id="stl_binary_ascii">stl_binary_ascii</button><button id="stl_writer">stl_writer</button><button id="tetris">Tetris</button><button id="turtle1">turtle1</button><button id="turtle2">turtle2</button><button id="turtle3">turtle3</button><button id="turtle4">turtle4</button><button id="turtle5">turtle5</button><button id="turtle6">turtle6</button><button id="turtle7">turtle7</button><button id="turtle8">turtle8</button><button id="twl_link_ik">twl_link_ik</button><button id="webcam">webcam</button><button id="websocket">websocket</button><button id="ycqsort">ycqsort</button></p>
<p><!-- ######################  editor1 開始 ###################### --></p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 --></p>
<p><!-- 這裡的畫布 id 為 brython_div --></p>
<div id="brython_div"></div>
<!-- graphics-column is for ggame -->
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- ######################  editor1 結束 ###################### --></p>
<p><!-- 以下可以開始利用 editor1 的設定編寫對應 Brython 程式 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    # 注意這裡清除的畫布 id 為 brython_div
    bd = doc["brython_div"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
<!-- 以上為內建程式, 頁面可透過 ?src=gist_url 執行 --></p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace2.editor.setValue(open(self.url).read())
        Ace2.editor.scrollToRow(0)
        Ace2.editor.gotoLine(0)
        Ace2.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"
add1to100 = button2(add1to100_url)
doc["add1to100"].bind('click', add1to100.do)
################################# p261 start 
p261_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/980606effcd29635307d6474718cd4a7ef016747/p261.py"
p261 = button2(p261_url)
doc["p261"].bind('click', p261.do)
################################## p261 end
################################## rocflag start
rocflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/roc_flag.py"
rocflag = button2(rocflag_url)
doc["rocflag"].bind("click", rocflag.do)
################################## rocflag end
################################## procflag start
procflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/03dd57e75b6b5be2b3d64c4fd15758e80cb9bf36/proc_flag.py"
procflag = button2(procflag_url)
doc["procflag"].bind("click", procflag.do)
################################## rocflag end
################################## drawgrid start
drawgrid_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/070f424f2e9a99617009af216762163f66628e6d/draw_grid.py"
drawgrid = button2(drawgrid_url)
doc["drawgrid"].bind("click", drawgrid.do)
################################## drawgrid end
################################## grid_rect start
grid_rect_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/f3683ed24646f63625b616e9cb8e61a9a08ae9be/draw_grid_random_rect.py"
grid_rect = button2(grid_rect_url)
doc["grid_rect"].bind("click", grid_rect.do)
################################## grid_rect end
################################## rect_walk start
rect_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/fdf9749488a59f00c2398aede8b6cbe8c0ed5d81/rect_walk.py"
rect_walk = button2(rect_walk_url)
doc["rect_walk"].bind("click", rect_walk.do)
################################## rect_walk end
################################## rect_walk start
rect_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/63645d3f5823fd22bdb02e840e46e551afee4087/rect_u_walk.py"
rect_u_walk = button2(rect_u_walk_url)
doc["rect_u_walk"].bind("click", rect_u_walk.do)
################################## rect_walk end
################################## rect_rev_u_walk start
rect_rev_u_walk_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/165e7792091d4b91b9923592242bfaf28258a719/rect_rev_u_walk.py"
rect_rev_u_walk = button2(rect_rev_u_walk_url)
doc["rect_rev_u_walk"].bind("click", rect_rev_u_walk.do)
################################## rect_rev_u_walk end
################################## single green chasing red start
sgcr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/9f7c1cda3a51b061cde00d104054fb3ce19ffd1a/single_green_chasing_red.py"
sgcr = button2(sgcr_url)
doc["sgcr"].bind("click", sgcr.do)
################################## single green chasing red end
################################## chasing 5 red rect start
# execute only one time
#cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/c43844d62a0bd7eb6617d5222ba93b5de033a63f/chasing_5_red_rect.py"
# continuously execution
cfrr_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/7e0563617649a2532ed0fc903858e135cbcedcd0/chasing_5_red_rect.py"
cfrr = button2(cfrr_url)
doc["cfrr"].bind("click", cfrr.do)
################################## chasing 5 red rect end
################################## usaflag start
usaflag_url = "https://gist.githubusercontent.com/mdecourse/2f56974a40da7a218dbaef376a5b4ca4/raw/144b62fa07987d5ab6f369ae3661c645405e1872/usaflag.py"
usaflag = button2(usaflag_url)
doc["usaflag"].bind("click", usaflag.do)
################################## usaflag end
################################## snake start
snake_url = "https://gist.githubusercontent.com/mdecourse/d55158478f4f8fcbfedd455f8be8c7b6/raw/f29309745a98687ed5c41cf90d28ef25a1e48dd4/snake_brython_div.py"
snake = button2(snake_url)
doc["snake"].bind("click", snake.do)
################################## snake end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecourse/2a8f213b6858a40481d17556c8a2fe86/raw/0a4a824493865dc7cf56977d03c9438d002b4268/kmlo_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## auto_guess start
auto_guess_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/auto_guess.py"
auto_guess = button2(auto_guess_url)
doc["auto_guess"].bind("click", auto_guess.do)
################################## auto_guess end
################################## ball start
ball_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ball.py"
ball = button2(ball_url)
doc["ball"].bind("click", ball.do)
################################## ball end
################################## bezier start
bezier_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/79794cbd97d0846e2c9df14d54118d5e00a97a22/bezier.py"
bezier = button2(bezier_url)
doc["bezier"].bind("click", bezier.do)
################################## bezier end
################################## big_lotto start
big_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/big_lotto.py"
big_lotto = button2(big_lotto_url)
doc["big_lotto"].bind("click", big_lotto.do)
################################## big_lotto end
################################## brython_kw start
brython_kw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/brython_kw.py"
brython_kw = button2(brython_kw_url)
doc["brython_kw"].bind("click", brython_kw.do)
################################## brython_kw end
################################## bunny start
bunny_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/bunny.py"
bunny = button2(bunny_url)
doc["bunny"].bind("click", bunny.do)
################################## bunny end
################################## cango_spur start
cango_spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur.py"
cango_spur = button2(cango_spur_url)
doc["cango_spur"].bind("click", cango_spur.do)
################################## cango_spur end
################################## cango_spur1 start
cango_spur1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_spur1.py"
cango_spur1 = button2(cango_spur1_url)
doc["cango_spur1"].bind("click", cango_spur1.do)
################################## cango_spur1 end
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/cango_three_gears.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## clear start
clear_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clear.py"
clear = button2(clear_url)
doc["clear"].bind("click", clear.do)
################################## clear end
################################## clock start
clock_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/clock.py"
clock = button2(clock_url)
doc["clock"].bind("click", clock.do)
################################## clock end
################################## convert_temp start
convert_temp_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/convert_temp.py"
convert_temp = button2(convert_temp_url)
doc["convert_temp"].bind("click", convert_temp.do)
################################## convert_temp end
################################## display_stl start
display_stl_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/display_stl.py"
display_stl = button2(display_stl_url)
doc["display_stl"].bind("click", display_stl.do)
################################## display_stl end
################################## draw start
draw_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/draw.py"
draw = button2(draw_url)
doc["draw"].bind("click", draw.do)
################################## draw end
################################## ex1 start
ex1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex1.py"
ex1 = button2(ex1_url)
doc["ex1"].bind("click", ex1.do)
################################## ex1 end
################################## ex2 start
ex2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex2.py"
ex2 = button2(ex2_url)
doc["ex2"].bind("click", ex2.do)
################################## ex2 end
################################## ex3 start
ex3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex3.py"
ex3 = button2(ex3_url)
doc["ex3"].bind("click", ex3.do)
################################## ex3 end
################################## ex4 start
ex4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ex4.py"
ex4 = button2(ex4_url)
doc["ex4"].bind("click", ex4.do)
################################## ex4 end
################################## fourbar start
fourbar_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fourbar.py"
fourbar = button2(fourbar_url)
doc["fourbar"].bind("click", fourbar.do)
################################## fourbar end
################################## guess_a_number start
guess_a_number_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/guess_a_number.py"
guess_a_number = button2(guess_a_number_url)
doc["guess_a_number"].bind("click", guess_a_number.do)
################################## guess_a_number end
################################## hw1_1 start
hw1_1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-1.py"
hw1_1 = button2(hw1_1_url)
doc["hw1_1"].bind("click", hw1_1.do)
################################## hw1_1 end
################################## hw1_2 start
hw1_2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/hw1-2.py"
hw1_2 = button2(hw1_2_url)
doc["hw1_2"].bind("click", hw1_2.do)
################################## hw1-2 end
################################## knova1 start
knova1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/konva1.py"
knova1 = button2(knova1_url)
doc["knova1"].bind("click", knova1.do)
################################## knova1 end
################################## power_lotto start
power_lotto_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/power_lotto.py"
power_lotto = button2(power_lotto_url)
doc["power_lotto"].bind("click", power_lotto.do)
################################## power_lotto end
################################## spur start
spur_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur.py"
spur = button2(spur_url)
doc["spur"].bind("click", spur.do)
################################## spur end
################################## spur_w_form start
spur_w_form_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e6d0cc9302f7b43bd36321d69c2433bec2cbcfd4/spur_w_form.py"
spur_w_form = button2(spur_w_form_url)
doc["spur_w_form"].bind("click", spur_w_form.do)
################################## spur_w_form end
################################## stl_binary_ascii start
stl_binary_ascii_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_binary_ascii.py"
stl_binary_ascii = button2(stl_binary_ascii_url)
doc["stl_binary_ascii"].bind("click", stl_binary_ascii.do)
################################## stl_binary_ascii end
################################## stl_writer start
stl_writer_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/stl_writer.py"
stl_writer = button2(stl_writer_url)
doc["stl_writer"].bind("click", stl_writer.do)
################################## stl_writer end
################################## turtle1 start
turtle1_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle1.py"
turtle1 = button2(turtle1_url)
doc["turtle1"].bind("click", turtle1.do)
################################## turtle1 end
################################## turtle2 start
turtle2_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle2.py"
turtle2 = button2(turtle2_url)
doc["turtle2"].bind("click", turtle2.do)
################################## turtle2 end
################################## turtle3 start
turtle3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle3.py"
turtle3 = button2(turtle3_url)
doc["turtle3"].bind("click", turtle3.do)
################################## turtle3 end
################################## turtle4 start
turtle4_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle4.py"
turtle4 = button2(turtle4_url)
doc["turtle4"].bind("click", turtle4.do)
################################## turtle4 end
################################## turtle5 start
turtle5_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle5.py"
turtle5 = button2(turtle5_url)
doc["turtle5"].bind("click", turtle5.do)
################################## turtle5 end
################################## turtle6 start
turtle6_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle6.py"
turtle6 = button2(turtle6_url)
doc["turtle6"].bind("click", turtle6.do)
################################## turtle6 end
################################## turtle7 start
turtle7_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle7.py"
turtle7 = button2(turtle7_url)
doc["turtle7"].bind("click", turtle7.do)
################################## turtle7 end
################################## turtle8 start
turtle8_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/turtle8.py"
turtle8 = button2(turtle8_url)
doc["turtle8"].bind("click", turtle8.do)
################################## turtle8 end
################################## twl_link_ik start
twl_link_ik_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/twl_link_ik.py"
twl_link_ik = button2(twl_link_ik_url)
doc["twl_link_ik"].bind("click", twl_link_ik.do)
################################## twl_link_ik end
################################## webcam start
webcam_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/webcam.py"
webcam = button2(webcam_url)
doc["webcam"].bind("click", webcam.do)
################################## webcam end
################################## ycqsort start
ycqsort_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/cb022783696ed8f2e8050f1427a05e652d5fa686/ycqsort.py"
ycqsort = button2(ycqsort_url)
doc["ycqsort"].bind("click", ycqsort.do)
################################## ycqsort end
################################## fibo start
fibo_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/fa232853da824f6dd5ae1f61a96543e6106c04b5/fibo_ex.py"
fibo = button2(fibo_url)
doc["fibo"].bind("click", fibo.do)
################################## fibo end
################################## deepmerge start
deepmerge_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/e89e0f978a015bf9361270a389a5b84e6244ed5b/deepmerge.py"
deepmerge = button2(deepmerge_url)
doc["deepmerge"].bind("click", deepmerge.do)
################################## deepmerge end
################################## merge3 start
merge3_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/8a7452a451e57e4de720f22fc2fc8abd6aac0bc8/merge3.py"
merge3 = button2(merge3_url)
doc["merge3"].bind("click", merge3.do)
################################## merge3 end
################################## websocket start
websocket_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/86dda666271974d6c520086700db14a2124f0ae8/websocket.py"
websocket = button2(websocket_url)
doc["websocket"].bind("click", websocket.do)
################################## websocket end
################################## keycode start
keycode_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/ba159101705aaf8ba182a442b455425a48a85610/keycode.py"
keycode = button2(keycode_url)
doc["keycode"].bind("click", keycode.do)
################################## keycode end
################################## tetris start
tetris_url = "https://gist.githubusercontent.com/mdecourse/05930b1775b77293523b59b1bbb43e57/raw/738223b424c3f5f12961070aa8a75185177420b6/pygame_to_brython_tetris.py"
tetris = button2(tetris_url)
doc["tetris"].bind("click", tetris.do)
################################## tetris end
</script>
</p>