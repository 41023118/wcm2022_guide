<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>網際內容管理 - Server</title><link href="./" rel="alternate"></link><link href="./feeds/server.atom.xml" rel="self"></link><id>./</id><updated>2022-04-01T23:00:07+08:00</updated><entry><title>hp 與 ub 伺服器</title><link href="./2022-WCM-hp-and-ub-server.html" rel="alternate"></link><published>2022-04-01T11:00:00+08:00</published><updated>2022-04-01T23:00:07+08:00</updated><author><name>kmolab</name></author><id>tag:None,2022-04-01:./2022-WCM-hp-and-ub-server.html</id><summary type="html">&lt;p&gt;2022 WCM 課程利用一台 2015 年出廠的 HPE Proliant ML 10 v2 伺服器, 以實體 Windows 10 與 Ubuntu 22.04 分別建立 hp (c13) 與 ub (c14) 等兩台伺服器.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2022 WCM 課程利用一台 2015 年出廠的 HPE Proliant ML 10 v2 伺服器, 以實體 Windows 10 與 Ubuntu 22.04 分別建立 hp (c13) 與 ub (c14) 等兩台伺服器.&lt;/p&gt;


&lt;h2&gt;Ubuntu 建立管理用戶&lt;/h2&gt;
&lt;p&gt;Ubuntu 22.04 安裝完成後, 必須先設法上網, 可以使用 /etc/netplan/*.yaml 檔案進行設定:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
network:
  version: 2
  ethernets:
    enp0s3:
      addresses:
        - 2001:288:6004:XX:XXXX::14/64
      routes:
        - to: default
          via:  2001:288:6004:XX::254
      nameservers:
        addresses: 
          - 2001:b000:168::1
&lt;/pre&gt;

&lt;p&gt;其中與 Ubuntu 20.04 的 netplan 網路設定差異是 gateway6 已經改為 routes.&lt;/p&gt;
&lt;p&gt;網路啟動後, 通常會以 sudo apt update 進行更新後, 先安裝 net-tools 與 xterm.&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo apt install net-tools
sudo apt install xterm
&lt;/pre&gt;

&lt;p&gt;安裝 net-tools 是為了能夠執行 ifconfig, 而 xterm 則是可以用 xterm &amp;amp; 帶出 X-Window
至於在 ifconfig 能夠執行之前, 也就是網路尚未完成設定前, 若要查詢 network device 的名稱, 可以採用 ip l show 指令.&lt;/p&gt;
&lt;h1&gt;建立新用戶&lt;/h1&gt;
&lt;p&gt;在 Ubuntu 建立新用戶, 可以使用 sudo adduser username, 若要將該用戶轉為系統管理者, 則可以使用:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo usermod -aG sudo username
&lt;/pre&gt;

&lt;h1&gt;安裝 nginx&lt;/h1&gt;
&lt;p&gt;在 Ubuntu 安裝 nginx, 可以採用 sudo apt install nginx, 之後的設定檔案位於 /etc/nginx/sites-available/default.&lt;/p&gt;
&lt;p&gt;sudo service nginx restart&lt;/p&gt;
&lt;p&gt;sudo service nginx stop&lt;/p&gt;
&lt;p&gt;sudo service nginx start&lt;/p&gt;
&lt;h1&gt;安裝 stunnel&lt;/h1&gt;
&lt;p&gt;在 Ubuntu 安裝 stunnel, 可以採用 sudo apt install stunnel, 之後的設定檔案可自行建立, 放入 /etc/stunnel 目錄, 名稱可設為 stunnel.conf, 至於設定範例檔案則位於 /usr/share/doc/stunnel4/examples/stunnel.conf-sample&lt;/p&gt;
&lt;h1&gt;uwsgi&lt;/h1&gt;
&lt;p&gt;目前的 &lt;a href="https://github.com/mdecycu/cmsimde"&gt;https://github.com/mdecycu/cmsimde&lt;/a&gt; 使用 Flask 編寫, 執行時需要額外 Python3 模組, 可以利用 pip3 安裝, 但必須先以 sudo apt install python3-pip 安裝 pip3:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo pip3 install flask flask_cors bs4 lxml pelican markdown leo pyopenssl
&lt;/pre&gt;

&lt;p&gt;其中 cmsimde 靜態網頁可以利用 nginx 伺服, 網站簽證用的 key 與 certificate 需要 openssl, 而 cmsimde 動態網頁則需要透過 uwsgi 進行部署.&lt;/p&gt;
&lt;p&gt;利用 openssl 建立 cmsimde.key 與 cmsimde.crt 指令:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout cmsimde.key -out cmsimde.crt
&lt;/pre&gt;

&lt;p&gt;與 uwsgi 有關的 Ubuntu 系統安裝則包括:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
// 安裝 pip3
sudo apt install python3-pip
// 安裝 python 編譯開發系統
sudo apt install build-essential python3-dev
// 安裝 uwsgi 模組
sudo pip3 install uwsgi
// 安裝 nginx 伺服套件與 uwsgi python3 plugin 程式庫
sudo apt install nginx uwsgi-plugin-python3
&lt;/pre&gt;

&lt;p&gt;用來伺服 cmsimde 靜態網頁的 nginx 參考設定:&lt;/p&gt;
&lt;p&gt;/etc/nginx/nginx.conf 中 user 必須設為 pj2022, 也就是 wcm2022 倉儲的擁有者&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
# for ub.cycu.org
# /etc/nginx/nginx.conf user pj2022
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    root /home/pj2022/github/wcm2022;
    index index.html;

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri $uri/ =404;
    }

}

# for /home/pj2022/github/wcm2022
server {
    listen 8443 ssl default_server;
    listen [::]:8443 ssl default_server;

    location / {
        include uwsgi_params;
        uwsgi_pass  127.0.0.1:9443;
    }

    ssl_certificate /etc/stunnel/cmsimde.crt;
    ssl_certificate_key /etc/stunnel/cmsimde.key;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_prefer_server_ciphers on;
    try_files $uri $uri/ =404;
}
&lt;/pre&gt;

&lt;p&gt;cmsimde 動態網站使用 uwsgi 啟動時, wcm2022/init.py 中的 uwsgi 必須設為 True.&lt;/p&gt;
&lt;p&gt;uwsgi_ini/uwsgi.ini&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
socket = 127.0.0.1:9443
uid = pj2022
gid = pj2022
plugins-dir = /usr/lib/uwsgi/plugins/
plugin = python3
master = true
process = 4
threads = 2
chdir = /home/pj2022/github/wcm2022/cmsimde
wsgi-file = /home/pj2022/github/wcm2022/cmsimde/wsgi.py
&lt;/pre&gt;

&lt;p&gt;啟動 uwsgi 指令, 將會逐一啟動 wsgi_ini 目錄中個別 .ini 檔案:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
sudo /usr/bin/uwsgi --emperor /home/user_account/wsgi_ini
&lt;/pre&gt;

&lt;p&gt;一般則利用 Ubuntu 系統服務, 用來啟動 uwsgi:&lt;/p&gt;
&lt;p&gt;/etc/systemd/system 的 cmsimde.service 服務啟動檔案內容:&lt;/p&gt;
&lt;pre class="brush: jscript"&gt;
[Unit]
Description=uWSGI to serve CMSiMDE
After=network.target

[Service]
User=pj2022
Group=pj2022
WorkingDirectory=/home/pj2022/uwsgi_ini
ExecStart=/usr/bin/uwsgi --emperor /home/pj2022/uwsgi_ini

[Install]
WantedBy=multi-user.target
&lt;/pre&gt;

&lt;p&gt;/etc/systemd/system/cmsimde.service 必須透過 sudo chmod uog+x cmsimde.service 設定讓檔案可以執行.&lt;/p&gt;
&lt;p&gt;接著將 cmsimde 服務設為隨系統開機啟動:&lt;/p&gt;
&lt;p&gt;sudo systemctl enable cmsimde&lt;/p&gt;
&lt;p&gt;若要取消 cmsimde 服務隨系統開機啟動:&lt;/p&gt;
&lt;p&gt;sudo systemctl disable cmsimde&lt;/p&gt;
&lt;p&gt;手動啟動 cmsimde.service 服務&lt;/p&gt;
&lt;p&gt;sudo systemctl start cmsimde&lt;/p&gt;
&lt;p&gt;手動停止 cmsimde.service 服務&lt;/p&gt;
&lt;p&gt;sudo systemctl stop cmsimde&lt;/p&gt;</content><category term="Server"></category><category term="2022SpringWCM"></category></entry></feed>